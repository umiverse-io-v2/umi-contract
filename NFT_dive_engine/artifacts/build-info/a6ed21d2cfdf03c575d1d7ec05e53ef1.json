{
	"id": "a6ed21d2cfdf03c575d1d7ec05e53ef1",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.20",
	"solcLongVersion": "0.8.20+commit.a1b79de6",
	"input": {
		"language": "Solidity",
		"sources": {
			"NFT_dive_engine/testTransfer.sol": {
				"content": "/**\n *Submitted for verification at OpbnbTrace on 2024-03-02\n*/\n\n\n// File: utils/Address.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n\n// File: openzeppelin/ERC20/extensions/IERC20Permit.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n *\n * ==== Security Considerations\n *\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n * generally recommended is:\n *\n * ```solidity\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n *     doThing(..., value);\n * }\n *\n * function doThing(..., uint256 value) public {\n *     token.safeTransferFrom(msg.sender, address(this), value);\n *     ...\n * }\n * ```\n *\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n * {SafeERC20-safeTransferFrom}).\n *\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n * contracts should have entry points that don't rely on permit.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     *\n     * CAUTION: See Security Considerations above.\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n\n// File: openzeppelin/ERC20/IERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC-20 standard as defined in the ERC.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the value of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the value of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 value) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n     * caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 value) external returns (bool);\n\n    /**\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\n     * allowance mechanism. `value` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\n}\n\n// File: openzeppelin/ERC20/utils/SafeERC20.sol\n\n\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\n\n\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC-20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev An operation with an ERC-20 token failed.\n     */\n    error SafeERC20FailedOperation(address token);\n\n    /**\n     * @dev Indicates a failed `decreaseAllowance` request.\n     */\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        forceApprove(token, spender, oldAllowance + value);\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n     * value, non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\n        unchecked {\n            uint256 currentAllowance = token.allowance(address(this), spender);\n            if (currentAllowance < requestedDecrease) {\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\n            }\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data);\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\n            revert SafeERC20FailedOperation(address(token));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\n    }\n}\n\n// File: bank/bank.sol\n\n\npragma solidity ^0.8.0;\n\n\ncontract Bank {\n    address public owner;\n    using SafeERC20 for IERC20;\n    \n    constructor(){\n        owner = msg.sender;\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"ERROR_PERMISSION\");\n        _;\n    }\n\n    function setOwner(address _owner) public onlyOwner{\n        owner = _owner;\n    }\n\n    function safeTransfer(address token, address receiver, uint256 amount) public onlyOwner{\n        // IERC20(token).safeIncreaseAllowance(owner, amount);\n        IERC20(token).safeTransfer(receiver, amount);\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"NFT_dive_engine/testTransfer.sol": {
				"Address": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Collection of functions related to the address type",
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"NFT_dive_engine/testTransfer.sol\":257:6323  library Address {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"NFT_dive_engine/testTransfer.sol\":257:6323  library Address {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa26469706673582212200ed3256acb0ca7287d64646b6cbebe761b719d8e8b49cb293ddfc9633169993e64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200ed3256acb0ca7287d64646b6cbebe761b719d8e8b49cb293ddfc9633169993e64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xD3 0x25 PUSH11 0xCB0CA7287D64646B6CBEBE PUSH23 0x1B719D8E8B49CB293DDFC9633169993E64736F6C634300 ADDMOD EQ STOP CALLER ",
							"sourceMap": "257:6066:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;257:6066:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea26469706673582212200ed3256acb0ca7287d64646b6cbebe761b719d8e8b49cb293ddfc9633169993e64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xE 0xD3 0x25 PUSH11 0xCB0CA7287D64646B6CBEBE PUSH23 0x1B719D8E8B49CB293DDFC9633169993E64736F6C634300 ADDMOD EQ STOP CALLER ",
							"sourceMap": "257:6066:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_revert(bytes memory)": "infinite",
								"functionCall(address,bytes memory)": "infinite",
								"functionCallWithValue(address,bytes memory,uint256)": "infinite",
								"functionDelegateCall(address,bytes memory)": "infinite",
								"functionStaticCall(address,bytes memory)": "infinite",
								"sendValue(address payable,uint256)": "infinite",
								"verifyCallResult(bool,bytes memory)": "infinite",
								"verifyCallResultFromTarget(address,bool,bytes memory)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 257,
									"end": 6323,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212200ed3256acb0ca7287d64646b6cbebe761b719d8e8b49cb293ddfc9633169993e64736f6c63430008140033",
									".code": [
										{
											"begin": 257,
											"end": 6323,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 257,
											"end": 6323,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"NFT_dive_engine/testTransfer.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NFT_dive_engine/testTransfer.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"NFT_dive_engine/testTransfer.sol\":{\"keccak256\":\"0x263626e1043b91c6bc01df96ca252fb9df13854e53fbf14dda57b33317b95578\",\"urls\":[\"bzz-raw://81afaaf6fd917ab0c1cda23e93b46da0d5f7f37981f0ce0cba4b697385aaf707\",\"dweb:/ipfs/QmYxoqK7Kc2gLNbWX6ctpypRkq94oxBz7kUKynxmtpSJ6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"Bank": {
					"abi": [
						{
							"inputs": [],
							"stateMutability": "nonpayable",
							"type": "constructor"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "target",
									"type": "address"
								}
							],
							"name": "AddressEmptyCode",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "AddressInsufficientBalance",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "FailedInnerCall",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "receiver",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "amount",
									"type": "uint256"
								}
							],
							"name": "safeTransfer",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_owner",
									"type": "address"
								}
							],
							"name": "setOwner",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"AddressEmptyCode(address)": [
								{
									"details": "There's no code at `target` (it is not a contract)."
								}
							],
							"AddressInsufficientBalance(address)": [
								{
									"details": "The ETH balance of the account is not enough to perform the operation."
								}
							],
							"FailedInnerCall()": [
								{
									"details": "A call to an address target failed. The target may have reverted."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"NFT_dive_engine/testTransfer.sol\":18637:19177  contract Bank {... */\n  mstore(0x40, 0x80)\n    /* \"NFT_dive_engine/testTransfer.sol\":18720:18768  constructor(){... */\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n    /* \"NFT_dive_engine/testTransfer.sol\":18743:18748  owner */\n  0x00\n    /* \"NFT_dive_engine/testTransfer.sol\":18743:18761  owner = msg.sender */\n  dup1\n  sload\n  not(sub(shl(0xa0, 0x01), 0x01))\n  and\n    /* \"NFT_dive_engine/testTransfer.sol\":18751:18761  msg.sender */\n  caller\n    /* \"NFT_dive_engine/testTransfer.sol\":18743:18761  owner = msg.sender */\n  or\n  swap1\n  sstore\n    /* \"NFT_dive_engine/testTransfer.sol\":18637:19177  contract Bank {... */\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"NFT_dive_engine/testTransfer.sol\":18637:19177  contract Bank {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x13af4035\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_4\n      jumpi\n      dup1\n      0xd1660f99\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"NFT_dive_engine/testTransfer.sol\":18877:18958  function setOwner(address _owner) public onlyOwner{... */\n    tag_3:\n      tag_6\n      tag_7\n      calldatasize\n      0x04\n      tag_8\n      jump\t// in\n    tag_7:\n      tag_9\n      jump\t// in\n    tag_6:\n      stop\n        /* \"NFT_dive_engine/testTransfer.sol\":18657:18677  address public owner */\n    tag_4:\n      sload(0x00)\n      tag_10\n      swap1\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      dup2\n      jump\n    tag_10:\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":529:580   */\n      dup2\n      mstore\n        /* \"#utility.yul\":517:519   */\n      0x20\n        /* \"#utility.yul\":502:520   */\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":18657:18677  address public owner */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"NFT_dive_engine/testTransfer.sol\":18964:19175  function safeTransfer(address token, address receiver, uint256 amount) public onlyOwner{... */\n    tag_5:\n      tag_6\n      tag_15\n      calldatasize\n      0x04\n      tag_16\n      jump\t// in\n    tag_15:\n      tag_17\n      jump\t// in\n        /* \"NFT_dive_engine/testTransfer.sol\":18877:18958  function setOwner(address _owner) public onlyOwner{... */\n    tag_9:\n        /* \"NFT_dive_engine/testTransfer.sol\":18827:18832  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"NFT_dive_engine/testTransfer.sol\":18813:18823  msg.sender */\n      caller\n        /* \"NFT_dive_engine/testTransfer.sol\":18813:18832  msg.sender == owner */\n      eq\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n      tag_19\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1126:1128   */\n      0x20\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1108:1129   */\n      mstore\n        /* \"#utility.yul\":1165:1167   */\n      0x10\n        /* \"#utility.yul\":1145:1163   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1138:1168   */\n      mstore\n      shl(0x81, 0x22a92927a92fa822a926a4a9a9a4a7a7)\n        /* \"#utility.yul\":1184:1202   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1177:1223   */\n      mstore\n        /* \"#utility.yul\":1240:1258   */\n      0x64\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n    tag_20:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_19:\n        /* \"NFT_dive_engine/testTransfer.sol\":18937:18942  owner */\n      0x00\n        /* \"NFT_dive_engine/testTransfer.sol\":18937:18951  owner = _owner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      swap3\n      swap1\n      swap3\n      and\n      swap2\n      swap1\n      swap2\n      or\n      swap1\n      sstore\n        /* \"NFT_dive_engine/testTransfer.sol\":18877:18958  function setOwner(address _owner) public onlyOwner{... */\n      jump\t// out\n        /* \"NFT_dive_engine/testTransfer.sol\":18964:19175  function safeTransfer(address token, address receiver, uint256 amount) public onlyOwner{... */\n    tag_17:\n        /* \"NFT_dive_engine/testTransfer.sol\":18827:18832  owner */\n      and(sub(shl(0xa0, 0x01), 0x01), sload(0x00))\n        /* \"NFT_dive_engine/testTransfer.sol\":18813:18823  msg.sender */\n      caller\n        /* \"NFT_dive_engine/testTransfer.sol\":18813:18832  msg.sender == owner */\n      eq\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n      tag_24\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":1126:1128   */\n      0x20\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":1108:1129   */\n      mstore\n        /* \"#utility.yul\":1165:1167   */\n      0x10\n        /* \"#utility.yul\":1145:1163   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":1138:1168   */\n      mstore\n      shl(0x81, 0x22a92927a92fa822a926a4a9a9a4a7a7)\n        /* \"#utility.yul\":1184:1202   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":1177:1223   */\n      mstore\n        /* \"#utility.yul\":1240:1258   */\n      0x64\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n      tag_20\n        /* \"#utility.yul\":924:1264   */\n      jump\n        /* \"NFT_dive_engine/testTransfer.sol\":18805:18853  require(msg.sender == owner, \"ERROR_PERMISSION\") */\n    tag_24:\n        /* \"NFT_dive_engine/testTransfer.sol\":19124:19168  IERC20(token).safeTransfer(receiver, amount) */\n      tag_27\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"NFT_dive_engine/testTransfer.sol\":19124:19150  IERC20(token).safeTransfer */\n      dup5\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":19151:19159  receiver */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":19161:19167  amount */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":19124:19150  IERC20(token).safeTransfer */\n      tag_28\n        /* \"NFT_dive_engine/testTransfer.sol\":19124:19168  IERC20(token).safeTransfer(receiver, amount) */\n      jump\t// in\n    tag_27:\n        /* \"NFT_dive_engine/testTransfer.sol\":18964:19175  function safeTransfer(address token, address receiver, uint256 amount) public onlyOwner{... */\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"NFT_dive_engine/testTransfer.sol\":14118:14278  function safeTransfer(IERC20 token, address to, uint256 value) internal {... */\n    tag_28:\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      0x40\n      dup1\n      mload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1461:1493   */\n      dup5\n      dup2\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      0x24\n      dup4\n      add\n        /* \"#utility.yul\":1443:1494   */\n      mstore\n        /* \"#utility.yul\":1510:1528   */\n      0x44\n      dup1\n      dup4\n      add\n        /* \"#utility.yul\":1503:1537   */\n      dup6\n      swap1\n      mstore\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      dup4\n      mload\n      dup1\n      dup5\n      sub\n      swap1\n      swap2\n      add\n      dup2\n      mstore\n        /* \"#utility.yul\":1416:1434   */\n      0x64\n      swap1\n      swap3\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      swap1\n      swap3\n      mstore\n      0x20\n      dup2\n      add\n      dup1\n      mload\n      sub(shl(0xe0, 0x01), 0x01)\n      and\n      shl(0xe0, 0xa9059cbb)\n      or\n      swap1\n      mstore\n        /* \"NFT_dive_engine/testTransfer.sol\":14200:14271  _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value))) */\n      tag_27\n      swap2\n        /* \"NFT_dive_engine/testTransfer.sol\":14220:14225  token */\n      dup6\n      swap2\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      swap1\n      0x00\n      swap1\n        /* \"NFT_dive_engine/testTransfer.sol\":17319:17352  address(token).functionCall(data) */\n      tag_35\n      swap1\n        /* \"NFT_dive_engine/testTransfer.sol\":14242:14256  token.transfer */\n      dup5\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":14227:14270  abi.encodeCall(token.transfer, (to, value)) */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":17319:17346  address(token).functionCall */\n      tag_36\n        /* \"NFT_dive_engine/testTransfer.sol\":17319:17352  address(token).functionCall(data) */\n      jump\t// in\n    tag_35:\n        /* \"NFT_dive_engine/testTransfer.sol\":17293:17352  bytes memory returndata = address(token).functionCall(data) */\n      swap1\n      pop\n        /* \"NFT_dive_engine/testTransfer.sol\":17366:17376  returndata */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":17366:17383  returndata.length */\n      mload\n        /* \"NFT_dive_engine/testTransfer.sol\":17387:17388  0 */\n      0x00\n        /* \"NFT_dive_engine/testTransfer.sol\":17366:17388  returndata.length != 0 */\n      eq\n      iszero\n        /* \"NFT_dive_engine/testTransfer.sol\":17366:17423  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n      dup1\n      iszero\n      tag_37\n      jumpi\n      pop\n        /* \"NFT_dive_engine/testTransfer.sol\":17404:17414  returndata */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":17393:17423  abi.decode(returndata, (bool)) */\n      dup1\n      0x20\n      add\n      swap1\n      mload\n      dup2\n      add\n      swap1\n      tag_38\n      swap2\n      swap1\n      tag_39\n      jump\t// in\n    tag_38:\n        /* \"NFT_dive_engine/testTransfer.sol\":17392:17423  !abi.decode(returndata, (bool)) */\n      iszero\n        /* \"NFT_dive_engine/testTransfer.sol\":17366:17423  returndata.length != 0 && !abi.decode(returndata, (bool)) */\n    tag_37:\n        /* \"NFT_dive_engine/testTransfer.sol\":17362:17497  if (returndata.length != 0 && !abi.decode(returndata, (bool))) {... */\n      iszero\n      tag_27\n      jumpi\n        /* \"NFT_dive_engine/testTransfer.sol\":17446:17486  SafeERC20FailedOperation(address(token)) */\n      mload(0x40)\n      shl(0xe0, 0x5274afe7)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      dup5\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":17446:17486  SafeERC20FailedOperation(address(token)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":17446:17486  SafeERC20FailedOperation(address(token)) */\n      tag_20\n        /* \"#utility.yul\":383:586   */\n      jump\n        /* \"NFT_dive_engine/testTransfer.sol\":2767:2918  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n    tag_36:\n        /* \"NFT_dive_engine/testTransfer.sol\":2842:2854  bytes memory */\n      0x60\n        /* \"NFT_dive_engine/testTransfer.sol\":2873:2911  functionCallWithValue(target, data, 0) */\n      tag_43\n        /* \"NFT_dive_engine/testTransfer.sol\":2895:2901  target */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":2903:2907  data */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":2909:2910  0 */\n      0x00\n        /* \"NFT_dive_engine/testTransfer.sol\":2873:2894  functionCallWithValue */\n      tag_44\n        /* \"NFT_dive_engine/testTransfer.sol\":2873:2911  functionCallWithValue(target, data, 0) */\n      jump\t// in\n    tag_43:\n        /* \"NFT_dive_engine/testTransfer.sol\":2866:2911  return functionCallWithValue(target, data, 0) */\n      swap4\n        /* \"NFT_dive_engine/testTransfer.sol\":2767:2918  function functionCall(address target, bytes memory data) internal returns (bytes memory) {... */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"NFT_dive_engine/testTransfer.sol\":3242:3634  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n    tag_44:\n        /* \"NFT_dive_engine/testTransfer.sol\":3341:3353  bytes memory */\n      0x60\n        /* \"NFT_dive_engine/testTransfer.sol\":3393:3398  value */\n      dup2\n        /* \"NFT_dive_engine/testTransfer.sol\":3369:3390  address(this).balance */\n      selfbalance\n        /* \"NFT_dive_engine/testTransfer.sol\":3369:3398  address(this).balance < value */\n      lt\n        /* \"NFT_dive_engine/testTransfer.sol\":3365:3473  if (address(this).balance < value) {... */\n      iszero\n      tag_46\n      jumpi\n        /* \"NFT_dive_engine/testTransfer.sol\":3421:3462  AddressInsufficientBalance(address(this)) */\n      mload(0x40)\n      shl(0xe0, 0xcd786059)\n      dup2\n      mstore\n        /* \"NFT_dive_engine/testTransfer.sol\":3456:3460  this */\n      address\n        /* \"NFT_dive_engine/testTransfer.sol\":3421:3462  AddressInsufficientBalance(address(this)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":3421:3462  AddressInsufficientBalance(address(this)) */\n      tag_20\n        /* \"#utility.yul\":383:586   */\n      jump\n        /* \"NFT_dive_engine/testTransfer.sol\":3365:3473  if (address(this).balance < value) {... */\n    tag_46:\n        /* \"NFT_dive_engine/testTransfer.sol\":3483:3495  bool success */\n      0x00\n        /* \"NFT_dive_engine/testTransfer.sol\":3497:3520  bytes memory returndata */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":3524:3530  target */\n      dup6\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"NFT_dive_engine/testTransfer.sol\":3524:3535  target.call */\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":3543:3548  value */\n      dup5\n        /* \"NFT_dive_engine/testTransfer.sol\":3550:3554  data */\n      dup7\n        /* \"NFT_dive_engine/testTransfer.sol\":3524:3555  target.call{value: value}(data) */\n      mload(0x40)\n      tag_48\n      swap2\n      swap1\n      tag_49\n      jump\t// in\n    tag_48:\n      0x00\n      mload(0x40)\n      dup1\n      dup4\n      sub\n      dup2\n      dup6\n      dup8\n      gas\n      call\n      swap3\n      pop\n      pop\n      pop\n      returndatasize\n      dup1\n      0x00\n      dup2\n      eq\n      tag_52\n      jumpi\n      mload(0x40)\n      swap2\n      pop\n      and(add(returndatasize, 0x3f), not(0x1f))\n      dup3\n      add\n      0x40\n      mstore\n      returndatasize\n      dup3\n      mstore\n      returndatasize\n      0x00\n      0x20\n      dup5\n      add\n      returndatacopy\n      jump(tag_51)\n    tag_52:\n      0x60\n      swap2\n      pop\n    tag_51:\n      pop\n        /* \"NFT_dive_engine/testTransfer.sol\":3482:3555  (bool success, bytes memory returndata) = target.call{value: value}(data) */\n      swap2\n      pop\n      swap2\n      pop\n        /* \"NFT_dive_engine/testTransfer.sol\":3572:3627  verifyCallResultFromTarget(target, success, returndata) */\n      tag_53\n        /* \"NFT_dive_engine/testTransfer.sol\":3599:3605  target */\n      dup7\n        /* \"NFT_dive_engine/testTransfer.sol\":3607:3614  success */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":3616:3626  returndata */\n      dup4\n        /* \"NFT_dive_engine/testTransfer.sol\":3572:3598  verifyCallResultFromTarget */\n      tag_54\n        /* \"NFT_dive_engine/testTransfer.sol\":3572:3627  verifyCallResultFromTarget(target, success, returndata) */\n      jump\t// in\n    tag_53:\n        /* \"NFT_dive_engine/testTransfer.sol\":3565:3627  return verifyCallResultFromTarget(target, success, returndata) */\n      swap7\n        /* \"NFT_dive_engine/testTransfer.sol\":3242:3634  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {... */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"NFT_dive_engine/testTransfer.sol\":4687:5269  function verifyCallResultFromTarget(... */\n    tag_54:\n        /* \"NFT_dive_engine/testTransfer.sol\":4831:4843  bytes memory */\n      0x60\n        /* \"NFT_dive_engine/testTransfer.sol\":4860:4867  success */\n      dup3\n        /* \"NFT_dive_engine/testTransfer.sol\":4855:5263  if (!success) {... */\n      tag_56\n      jumpi\n        /* \"NFT_dive_engine/testTransfer.sol\":4883:4902  _revert(returndata) */\n      tag_57\n        /* \"NFT_dive_engine/testTransfer.sol\":4891:4901  returndata */\n      dup3\n        /* \"NFT_dive_engine/testTransfer.sol\":4883:4890  _revert */\n      tag_58\n        /* \"NFT_dive_engine/testTransfer.sol\":4883:4902  _revert(returndata) */\n      jump\t// in\n    tag_57:\n        /* \"NFT_dive_engine/testTransfer.sol\":4855:5263  if (!success) {... */\n      jump(tag_43)\n    tag_56:\n        /* \"NFT_dive_engine/testTransfer.sol\":5107:5124  returndata.length */\n      dup2\n      mload\n        /* \"NFT_dive_engine/testTransfer.sol\":5107:5129  returndata.length == 0 */\n      iszero\n        /* \"NFT_dive_engine/testTransfer.sol\":5107:5156  returndata.length == 0 && target.code.length == 0 */\n      dup1\n      iszero\n      tag_60\n      jumpi\n      pop\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"NFT_dive_engine/testTransfer.sol\":5133:5151  target.code.length */\n      dup5\n      and\n      extcodesize\n        /* \"NFT_dive_engine/testTransfer.sol\":5133:5156  target.code.length == 0 */\n      iszero\n        /* \"NFT_dive_engine/testTransfer.sol\":5107:5156  returndata.length == 0 && target.code.length == 0 */\n    tag_60:\n        /* \"NFT_dive_engine/testTransfer.sol\":5103:5222  if (returndata.length == 0 && target.code.length == 0) {... */\n      iszero\n      tag_61\n      jumpi\n        /* \"NFT_dive_engine/testTransfer.sol\":5183:5207  AddressEmptyCode(target) */\n      mload(0x40)\n      shl(0xe0, 0x9996b315)\n      dup2\n      mstore\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":547:579   */\n      dup6\n      and\n        /* \"NFT_dive_engine/testTransfer.sol\":5183:5207  AddressEmptyCode(target) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":529:580   */\n      mstore\n        /* \"#utility.yul\":502:520   */\n      0x24\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":5183:5207  AddressEmptyCode(target) */\n      tag_20\n        /* \"#utility.yul\":383:586   */\n      jump\n        /* \"NFT_dive_engine/testTransfer.sol\":5103:5222  if (returndata.length == 0 && target.code.length == 0) {... */\n    tag_61:\n      pop\n        /* \"NFT_dive_engine/testTransfer.sol\":5242:5252  returndata */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":5235:5252  return returndata */\n      jump(tag_43)\n        /* \"NFT_dive_engine/testTransfer.sol\":5805:6321  function _revert(bytes memory returndata) private pure {... */\n    tag_58:\n        /* \"NFT_dive_engine/testTransfer.sol\":5936:5953  returndata.length */\n      dup1\n      mload\n        /* \"NFT_dive_engine/testTransfer.sol\":5936:5957  returndata.length > 0 */\n      iszero\n        /* \"NFT_dive_engine/testTransfer.sol\":5932:6315  if (returndata.length > 0) {... */\n      tag_64\n      jumpi\n        /* \"NFT_dive_engine/testTransfer.sol\":6164:6174  returndata */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":6158:6175  mload(returndata) */\n      mload\n        /* \"NFT_dive_engine/testTransfer.sol\":6220:6235  returndata_size */\n      dup1\n        /* \"NFT_dive_engine/testTransfer.sol\":6207:6217  returndata */\n      dup3\n        /* \"NFT_dive_engine/testTransfer.sol\":6203:6205  32 */\n      0x20\n        /* \"NFT_dive_engine/testTransfer.sol\":6199:6218  add(32, returndata) */\n      add\n        /* \"NFT_dive_engine/testTransfer.sol\":6192:6236  revert(add(32, returndata), returndata_size) */\n      revert\n        /* \"NFT_dive_engine/testTransfer.sol\":5932:6315  if (returndata.length > 0) {... */\n    tag_64:\n        /* \"NFT_dive_engine/testTransfer.sol\":6287:6304  FailedInnerCall() */\n      mload(0x40)\n      shl(0xe1, 0x0a12f521)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"#utility.yul\":14:187   */\n    tag_66:\n        /* \"#utility.yul\":82:102   */\n      dup1\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":131:162   */\n      dup2\n      and\n        /* \"#utility.yul\":121:163   */\n      dup2\n      eq\n        /* \"#utility.yul\":111:181   */\n      tag_69\n      jumpi\n        /* \"#utility.yul\":177:178   */\n      0x00\n        /* \"#utility.yul\":174:175   */\n      dup1\n        /* \"#utility.yul\":167:179   */\n      revert\n        /* \"#utility.yul\":111:181   */\n    tag_69:\n        /* \"#utility.yul\":14:187   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":192:378   */\n    tag_8:\n        /* \"#utility.yul\":251:257   */\n      0x00\n        /* \"#utility.yul\":304:306   */\n      0x20\n        /* \"#utility.yul\":292:301   */\n      dup3\n        /* \"#utility.yul\":283:290   */\n      dup5\n        /* \"#utility.yul\":279:302   */\n      sub\n        /* \"#utility.yul\":275:307   */\n      slt\n        /* \"#utility.yul\":272:324   */\n      iszero\n      tag_71\n      jumpi\n        /* \"#utility.yul\":320:321   */\n      0x00\n        /* \"#utility.yul\":317:318   */\n      dup1\n        /* \"#utility.yul\":310:322   */\n      revert\n        /* \"#utility.yul\":272:324   */\n    tag_71:\n        /* \"#utility.yul\":343:372   */\n      tag_43\n        /* \"#utility.yul\":362:371   */\n      dup3\n        /* \"#utility.yul\":343:372   */\n      tag_66\n      jump\t// in\n        /* \"#utility.yul\":591:919   */\n    tag_16:\n        /* \"#utility.yul\":668:674   */\n      0x00\n        /* \"#utility.yul\":676:682   */\n      dup1\n        /* \"#utility.yul\":684:690   */\n      0x00\n        /* \"#utility.yul\":737:739   */\n      0x60\n        /* \"#utility.yul\":725:734   */\n      dup5\n        /* \"#utility.yul\":716:723   */\n      dup7\n        /* \"#utility.yul\":712:735   */\n      sub\n        /* \"#utility.yul\":708:740   */\n      slt\n        /* \"#utility.yul\":705:757   */\n      iszero\n      tag_75\n      jumpi\n        /* \"#utility.yul\":753:754   */\n      0x00\n        /* \"#utility.yul\":750:751   */\n      dup1\n        /* \"#utility.yul\":743:755   */\n      revert\n        /* \"#utility.yul\":705:757   */\n    tag_75:\n        /* \"#utility.yul\":776:805   */\n      tag_76\n        /* \"#utility.yul\":795:804   */\n      dup5\n        /* \"#utility.yul\":776:805   */\n      tag_66\n      jump\t// in\n    tag_76:\n        /* \"#utility.yul\":766:805   */\n      swap3\n      pop\n        /* \"#utility.yul\":824:862   */\n      tag_77\n        /* \"#utility.yul\":858:860   */\n      0x20\n        /* \"#utility.yul\":847:856   */\n      dup6\n        /* \"#utility.yul\":843:861   */\n      add\n        /* \"#utility.yul\":824:862   */\n      tag_66\n      jump\t// in\n    tag_77:\n        /* \"#utility.yul\":814:862   */\n      swap2\n      pop\n        /* \"#utility.yul\":909:911   */\n      0x40\n        /* \"#utility.yul\":898:907   */\n      dup5\n        /* \"#utility.yul\":894:912   */\n      add\n        /* \"#utility.yul\":881:913   */\n      calldataload\n        /* \"#utility.yul\":871:913   */\n      swap1\n      pop\n        /* \"#utility.yul\":591:919   */\n      swap3\n      pop\n      swap3\n      pop\n      swap3\n      jump\t// out\n        /* \"#utility.yul\":1548:1825   */\n    tag_39:\n        /* \"#utility.yul\":1615:1621   */\n      0x00\n        /* \"#utility.yul\":1668:1670   */\n      0x20\n        /* \"#utility.yul\":1656:1665   */\n      dup3\n        /* \"#utility.yul\":1647:1654   */\n      dup5\n        /* \"#utility.yul\":1643:1666   */\n      sub\n        /* \"#utility.yul\":1639:1671   */\n      slt\n        /* \"#utility.yul\":1636:1688   */\n      iszero\n      tag_81\n      jumpi\n        /* \"#utility.yul\":1684:1685   */\n      0x00\n        /* \"#utility.yul\":1681:1682   */\n      dup1\n        /* \"#utility.yul\":1674:1686   */\n      revert\n        /* \"#utility.yul\":1636:1688   */\n    tag_81:\n        /* \"#utility.yul\":1716:1725   */\n      dup2\n        /* \"#utility.yul\":1710:1726   */\n      mload\n        /* \"#utility.yul\":1769:1774   */\n      dup1\n        /* \"#utility.yul\":1762:1775   */\n      iszero\n        /* \"#utility.yul\":1755:1776   */\n      iszero\n        /* \"#utility.yul\":1748:1753   */\n      dup2\n        /* \"#utility.yul\":1745:1777   */\n      eq\n        /* \"#utility.yul\":1735:1795   */\n      tag_43\n      jumpi\n        /* \"#utility.yul\":1791:1792   */\n      0x00\n        /* \"#utility.yul\":1788:1789   */\n      dup1\n        /* \"#utility.yul\":1781:1793   */\n      revert\n        /* \"#utility.yul\":1830:2242   */\n    tag_49:\n        /* \"#utility.yul\":1959:1962   */\n      0x00\n        /* \"#utility.yul\":1997:2003   */\n      dup3\n        /* \"#utility.yul\":1991:2004   */\n      mload\n        /* \"#utility.yul\":2022:2023   */\n      0x00\n        /* \"#utility.yul\":2032:2161   */\n    tag_84:\n        /* \"#utility.yul\":2046:2052   */\n      dup2\n        /* \"#utility.yul\":2043:2044   */\n      dup2\n        /* \"#utility.yul\":2040:2053   */\n      lt\n        /* \"#utility.yul\":2032:2161   */\n      iszero\n      tag_86\n      jumpi\n        /* \"#utility.yul\":2144:2148   */\n      0x20\n        /* \"#utility.yul\":2128:2142   */\n      dup2\n      dup7\n      add\n        /* \"#utility.yul\":2124:2149   */\n      dup2\n      add\n        /* \"#utility.yul\":2118:2150   */\n      mload\n        /* \"#utility.yul\":2105:2116   */\n      dup6\n      dup4\n      add\n        /* \"#utility.yul\":2098:2151   */\n      mstore\n        /* \"#utility.yul\":2061:2073   */\n      add\n        /* \"#utility.yul\":2032:2161   */\n      jump(tag_84)\n    tag_86:\n      pop\n        /* \"#utility.yul\":2216:2217   */\n      0x00\n        /* \"#utility.yul\":2180:2196   */\n      swap3\n      add\n        /* \"#utility.yul\":2205:2218   */\n      swap2\n      dup3\n      mstore\n      pop\n        /* \"#utility.yul\":2180:2196   */\n      swap2\n        /* \"#utility.yul\":1830:2242   */\n      swap1\n      pop\n      jump\t// out\n\n    auxdata: 0xa26469706673582212201e8faa96c7dc6c8294633c62a9dc85c8573ca561fa3fb3698e0e8566d33283f364736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {
								"@_663": {
									"entryPoint": null,
									"id": 663,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b505f80546001600160a01b0319163317905561043a8061002e5f395ff3fe608060405234801561000f575f80fd5b506004361061003f575f3560e01c806313af4035146100435780638da5cb5b14610058578063d1660f9914610086575b5f80fd5b610056610051366004610367565b610099565b005b5f5461006a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610056610094366004610380565b61010b565b5f546001600160a01b031633146100ea5760405162461bcd60e51b815260206004820152601060248201526f22a92927a92fa822a926a4a9a9a4a7a760811b60448201526064015b60405180910390fd5b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146101575760405162461bcd60e51b815260206004820152601060248201526f22a92927a92fa822a926a4a9a9a4a7a760811b60448201526064016100e1565b61016b6001600160a01b0384168383610170565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b17905261016b918591905f906101cd9084168361021a565b905080515f141580156101f15750808060200190518101906101ef91906103b9565b155b1561016b57604051635274afe760e01b81526001600160a01b03841660048201526024016100e1565b606061022783835f61022e565b9392505050565b6060814710156102535760405163cd78605960e01b81523060048201526024016100e1565b5f80856001600160a01b0316848660405161026e91906103d8565b5f6040518083038185875af1925050503d805f81146102a8576040519150601f19603f3d011682016040523d82523d5f602084013e6102ad565b606091505b50915091506102bd8683836102c7565b9695505050505050565b6060826102dc576102d782610323565b610227565b81511580156102f357506001600160a01b0384163b155b1561031c57604051639996b31560e01b81526001600160a01b03851660048201526024016100e1565b5080610227565b8051156103335780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114610362575f80fd5b919050565b5f60208284031215610377575f80fd5b6102278261034c565b5f805f60608486031215610392575f80fd5b61039b8461034c565b92506103a96020850161034c565b9150604084013590509250925092565b5f602082840312156103c9575f80fd5b81518015158114610227575f80fd5b5f82515f5b818110156103f757602081860181015185830152016103dd565b505f92019182525091905056fea26469706673582212201e8faa96c7dc6c8294633c62a9dc85c8573ca561fa3fb3698e0e8566d33283f364736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x43A DUP1 PUSH2 0x2E PUSH0 CODECOPY PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x43 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58 JUMPI DUP1 PUSH4 0xD1660F99 EQ PUSH2 0x86 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x56 PUSH2 0x51 CALLDATASIZE PUSH1 0x4 PUSH2 0x367 JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST STOP JUMPDEST PUSH0 SLOAD PUSH2 0x6A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56 PUSH2 0x94 CALLDATASIZE PUSH1 0x4 PUSH2 0x380 JUMP JUMPDEST PUSH2 0x10B JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x22A92927A92FA822A926A4A9A9A4A7A7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x157 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x22A92927A92FA822A926A4A9A9A4A7A7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH2 0x16B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x170 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x16B SWAP2 DUP6 SWAP2 SWAP1 PUSH0 SWAP1 PUSH2 0x1CD SWAP1 DUP5 AND DUP4 PUSH2 0x21A JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x3B9 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x16B JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x227 DUP4 DUP4 PUSH0 PUSH2 0x22E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x253 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x3D8 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2A8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2BD DUP7 DUP4 DUP4 PUSH2 0x2C7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x2DC JUMPI PUSH2 0x2D7 DUP3 PUSH2 0x323 JUMP JUMPDEST PUSH2 0x227 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x2F3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x31C JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST POP DUP1 PUSH2 0x227 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x333 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x362 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x377 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x227 DUP3 PUSH2 0x34C JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x392 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x39B DUP5 PUSH2 0x34C JUMP JUMPDEST SWAP3 POP PUSH2 0x3A9 PUSH1 0x20 DUP6 ADD PUSH2 0x34C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x227 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP3 MLOAD PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x3DD JUMP JUMPDEST POP PUSH0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E DUP16 0xAA SWAP7 0xC7 0xDC PUSH13 0x8294633C62A9DC85C8573CA561 STATICCALL EXTCODEHASH 0xB3 PUSH10 0x8E0E8566D33283F36473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "18637:540:0:-:0;;;18720:48;;;;;;;;;-1:-1:-1;18743:5:0;:18;;-1:-1:-1;;;;;;18743:18:0;18751:10;18743:18;;;18637:540;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@_callOptionalReturn_597": {
									"entryPoint": null,
									"id": 597,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"@_revert_251": {
									"entryPoint": 803,
									"id": 251,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@functionCallWithValue_119": {
									"entryPoint": 558,
									"id": 119,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"@functionCall_73": {
									"entryPoint": 538,
									"id": 73,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"@owner_650": {
									"entryPoint": null,
									"id": 650,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@safeTransfer_407": {
									"entryPoint": 368,
									"id": 407,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@safeTransfer_707": {
									"entryPoint": 267,
									"id": 707,
									"parameterSlots": 3,
									"returnSlots": 0
								},
								"@setOwner_687": {
									"entryPoint": 153,
									"id": 687,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@verifyCallResultFromTarget_211": {
									"entryPoint": 711,
									"id": 211,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_decode_address": {
									"entryPoint": 844,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 871,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_addresst_addresst_uint256": {
									"entryPoint": 896,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 3
								},
								"abi_decode_tuple_t_bool_fromMemory": {
									"entryPoint": 953,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed": {
									"entryPoint": 984,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 3,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_bcdf352dc508bc3efcba9254ed58add8548a43d4a14ee81a7e3061cf76bb2b42__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2244:1",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:1",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "63:124:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "73:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "95:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "82:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "82:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "73:5:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "165:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "174:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "177:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "167:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "167:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "167:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "124:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "135:5:1"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "150:3:1",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "155:1:1",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "146:3:1"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "146:11:1"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "159:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "142:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "142:19:1"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "131:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "131:31:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "121:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "121:42:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "114:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "114:50:1"
															},
															"nodeType": "YulIf",
															"src": "111:70:1"
														}
													]
												},
												"name": "abi_decode_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "42:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:1",
														"type": ""
													}
												],
												"src": "14:173:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "262:116:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "308:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "317:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "320:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "310:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "310:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "310:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "283:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "292:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "279:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "279:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "304:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "275:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "275:32:1"
															},
															"nodeType": "YulIf",
															"src": "272:52:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "333:39:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "362:9:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "343:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "343:29:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "333:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "228:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "239:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "251:6:1",
														"type": ""
													}
												],
												"src": "192:186:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "484:102:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "494:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "506:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "517:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "502:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "502:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "494:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "536:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "551:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "567:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "572:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "563:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "563:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "576:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "559:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "559:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "547:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "547:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "529:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "529:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "529:51:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "453:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "464:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "475:4:1",
														"type": ""
													}
												],
												"src": "383:203:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "695:224:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "741:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "750:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "753:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "743:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "743:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "743:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "716:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "725:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "712:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "712:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "737:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "708:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "708:32:1"
															},
															"nodeType": "YulIf",
															"src": "705:52:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "766:39:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "795:9:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "776:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "776:29:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "766:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "814:48:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "847:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "858:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "843:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "843:18:1"
																	}
																],
																"functionName": {
																	"name": "abi_decode_address",
																	"nodeType": "YulIdentifier",
																	"src": "824:18:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "824:38:1"
															},
															"variableNames": [
																{
																	"name": "value1",
																	"nodeType": "YulIdentifier",
																	"src": "814:6:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "871:42:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "898:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "909:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "894:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "894:18:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "881:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "881:32:1"
															},
															"variableNames": [
																{
																	"name": "value2",
																	"nodeType": "YulIdentifier",
																	"src": "871:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_addresst_addresst_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "645:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "656:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "668:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "676:6:1",
														"type": ""
													},
													{
														"name": "value2",
														"nodeType": "YulTypedName",
														"src": "684:6:1",
														"type": ""
													}
												],
												"src": "591:328:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1098:166:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1115:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1126:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1108:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1108:21:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1108:21:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1149:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1160:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1145:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1145:18:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1165:2:1",
																		"type": "",
																		"value": "16"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1138:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1138:30:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1138:30:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1188:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1199:2:1",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1184:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1184:18:1"
																	},
																	{
																		"hexValue": "4552524f525f5045524d495353494f4e",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "1204:18:1",
																		"type": "",
																		"value": "ERROR_PERMISSION"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1177:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1177:46:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1177:46:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1232:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1244:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1255:2:1",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1240:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1240:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1232:4:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_bcdf352dc508bc3efcba9254ed58add8548a43d4a14ee81a7e3061cf76bb2b42__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1075:9:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1089:4:1",
														"type": ""
													}
												],
												"src": "924:340:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1398:145:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1408:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1420:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1431:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1416:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1416:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1408:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1450:9:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "1465:6:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1481:3:1",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1486:1:1",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "1477:3:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1477:11:1"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1490:1:1",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "1473:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1473:19:1"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "1461:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1461:32:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1443:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1443:51:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1443:51:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1514:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1525:2:1",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "1510:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1510:18:1"
																	},
																	{
																		"name": "value1",
																		"nodeType": "YulIdentifier",
																		"src": "1530:6:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1503:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1503:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1503:34:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1359:9:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "1370:6:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1378:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "1389:4:1",
														"type": ""
													}
												],
												"src": "1269:274:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1626:199:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1672:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1681:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1684:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1674:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1674:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1674:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1647:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1656:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1643:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1643:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1668:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1639:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1639:32:1"
															},
															"nodeType": "YulIf",
															"src": "1636:52:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1697:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1716:9:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1710:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1710:16:1"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1701:5:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1779:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1788:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1791:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1781:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1781:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1781:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1748:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"name": "value",
																								"nodeType": "YulIdentifier",
																								"src": "1769:5:1"
																							}
																						],
																						"functionName": {
																							"name": "iszero",
																							"nodeType": "YulIdentifier",
																							"src": "1762:6:1"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1762:13:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1755:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1755:21:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1745:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1745:32:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1738:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1738:40:1"
															},
															"nodeType": "YulIf",
															"src": "1735:60:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1804:15:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1814:5:1"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1804:6:1"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_bool_fromMemory",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1592:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1603:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1615:6:1",
														"type": ""
													}
												],
												"src": "1548:277:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1967:275:1",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1977:27:1",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "1997:6:1"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1991:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1991:13:1"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "1981:6:1",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2013:10:1",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "2022:1:1",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "2017:1:1",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2084:77:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"name": "pos",
																							"nodeType": "YulIdentifier",
																							"src": "2109:3:1"
																						},
																						{
																							"name": "i",
																							"nodeType": "YulIdentifier",
																							"src": "2114:1:1"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "2105:3:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2105:11:1"
																				},
																				{
																					"arguments": [
																						{
																							"arguments": [
																								{
																									"arguments": [
																										{
																											"name": "value0",
																											"nodeType": "YulIdentifier",
																											"src": "2132:6:1"
																										},
																										{
																											"name": "i",
																											"nodeType": "YulIdentifier",
																											"src": "2140:1:1"
																										}
																									],
																									"functionName": {
																										"name": "add",
																										"nodeType": "YulIdentifier",
																										"src": "2128:3:1"
																									},
																									"nodeType": "YulFunctionCall",
																									"src": "2128:14:1"
																								},
																								{
																									"kind": "number",
																									"nodeType": "YulLiteral",
																									"src": "2144:4:1",
																									"type": "",
																									"value": "0x20"
																								}
																							],
																							"functionName": {
																								"name": "add",
																								"nodeType": "YulIdentifier",
																								"src": "2124:3:1"
																							},
																							"nodeType": "YulFunctionCall",
																							"src": "2124:25:1"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "2118:5:1"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "2118:32:1"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "2098:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2098:53:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2098:53:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "2043:1:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2046:6:1"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "2040:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2040:13:1"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "2054:21:1",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "2056:17:1",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "2065:1:1"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2068:4:1",
																					"type": "",
																					"value": "0x20"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "2061:3:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2061:12:1"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "2056:1:1"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "2036:3:1",
																"statements": []
															},
															"src": "2032:129:1"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "2170:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "2184:3:1"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "2189:6:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2180:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2180:16:1"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "2174:2:1",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "2212:2:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2216:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2205:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2205:13:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2205:13:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2227:9:1",
															"value": {
																"name": "_1",
																"nodeType": "YulIdentifier",
																"src": "2234:2:1"
															},
															"variableNames": [
																{
																	"name": "end",
																	"nodeType": "YulIdentifier",
																	"src": "2227:3:1"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "1943:3:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1948:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "1959:3:1",
														"type": ""
													}
												],
												"src": "1830:412:1"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := abi_decode_address(headStart)\n        value1 := abi_decode_address(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_encode_tuple_t_stringliteral_bcdf352dc508bc3efcba9254ed58add8548a43d4a14ee81a7e3061cf76bb2b42__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 16)\n        mstore(add(headStart, 64), \"ERROR_PERMISSION\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 0x20) }\n        {\n            mstore(add(pos, i), mload(add(add(value0, i), 0x20)))\n        }\n        let _1 := add(pos, length)\n        mstore(_1, 0)\n        end := _1\n    }\n}",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561000f575f80fd5b506004361061003f575f3560e01c806313af4035146100435780638da5cb5b14610058578063d1660f9914610086575b5f80fd5b610056610051366004610367565b610099565b005b5f5461006a906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b610056610094366004610380565b61010b565b5f546001600160a01b031633146100ea5760405162461bcd60e51b815260206004820152601060248201526f22a92927a92fa822a926a4a9a9a4a7a760811b60448201526064015b60405180910390fd5b5f80546001600160a01b0319166001600160a01b0392909216919091179055565b5f546001600160a01b031633146101575760405162461bcd60e51b815260206004820152601060248201526f22a92927a92fa822a926a4a9a9a4a7a760811b60448201526064016100e1565b61016b6001600160a01b0384168383610170565b505050565b604080516001600160a01b03848116602483015260448083018590528351808403909101815260649092019092526020810180516001600160e01b031663a9059cbb60e01b17905261016b918591905f906101cd9084168361021a565b905080515f141580156101f15750808060200190518101906101ef91906103b9565b155b1561016b57604051635274afe760e01b81526001600160a01b03841660048201526024016100e1565b606061022783835f61022e565b9392505050565b6060814710156102535760405163cd78605960e01b81523060048201526024016100e1565b5f80856001600160a01b0316848660405161026e91906103d8565b5f6040518083038185875af1925050503d805f81146102a8576040519150601f19603f3d011682016040523d82523d5f602084013e6102ad565b606091505b50915091506102bd8683836102c7565b9695505050505050565b6060826102dc576102d782610323565b610227565b81511580156102f357506001600160a01b0384163b155b1561031c57604051639996b31560e01b81526001600160a01b03851660048201526024016100e1565b5080610227565b8051156103335780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b80356001600160a01b0381168114610362575f80fd5b919050565b5f60208284031215610377575f80fd5b6102278261034c565b5f805f60608486031215610392575f80fd5b61039b8461034c565b92506103a96020850161034c565b9150604084013590509250925092565b5f602082840312156103c9575f80fd5b81518015158114610227575f80fd5b5f82515f5b818110156103f757602081860181015185830152016103dd565b505f92019182525091905056fea26469706673582212201e8faa96c7dc6c8294633c62a9dc85c8573ca561fa3fb3698e0e8566d33283f364736f6c63430008140033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x3F JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x13AF4035 EQ PUSH2 0x43 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x58 JUMPI DUP1 PUSH4 0xD1660F99 EQ PUSH2 0x86 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x56 PUSH2 0x51 CALLDATASIZE PUSH1 0x4 PUSH2 0x367 JUMP JUMPDEST PUSH2 0x99 JUMP JUMPDEST STOP JUMPDEST PUSH0 SLOAD PUSH2 0x6A SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x56 PUSH2 0x94 CALLDATASIZE PUSH1 0x4 PUSH2 0x380 JUMP JUMPDEST PUSH2 0x10B JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xEA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x22A92927A92FA822A926A4A9A9A4A7A7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH0 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x157 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x10 PUSH1 0x24 DUP3 ADD MSTORE PUSH16 0x22A92927A92FA822A926A4A9A9A4A7A7 PUSH1 0x81 SHL PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH2 0x16B PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP4 DUP4 PUSH2 0x170 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB AND PUSH4 0xA9059CBB PUSH1 0xE0 SHL OR SWAP1 MSTORE PUSH2 0x16B SWAP2 DUP6 SWAP2 SWAP1 PUSH0 SWAP1 PUSH2 0x1CD SWAP1 DUP5 AND DUP4 PUSH2 0x21A JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ ISZERO DUP1 ISZERO PUSH2 0x1F1 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1EF SWAP2 SWAP1 PUSH2 0x3B9 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH2 0x16B JUMPI PUSH1 0x40 MLOAD PUSH4 0x5274AFE7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x227 DUP4 DUP4 PUSH0 PUSH2 0x22E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 SELFBALANCE LT ISZERO PUSH2 0x253 JUMPI PUSH1 0x40 MLOAD PUSH4 0xCD786059 PUSH1 0xE0 SHL DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST PUSH0 DUP1 DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP5 DUP7 PUSH1 0x40 MLOAD PUSH2 0x26E SWAP2 SWAP1 PUSH2 0x3D8 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x2A8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x2AD JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2BD DUP7 DUP4 DUP4 PUSH2 0x2C7 JUMP JUMPDEST SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 PUSH2 0x2DC JUMPI PUSH2 0x2D7 DUP3 PUSH2 0x323 JUMP JUMPDEST PUSH2 0x227 JUMP JUMPDEST DUP2 MLOAD ISZERO DUP1 ISZERO PUSH2 0x2F3 JUMPI POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND EXTCODESIZE ISZERO JUMPDEST ISZERO PUSH2 0x31C JUMPI PUSH1 0x40 MLOAD PUSH4 0x9996B315 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0xE1 JUMP JUMPDEST POP DUP1 PUSH2 0x227 JUMP JUMPDEST DUP1 MLOAD ISZERO PUSH2 0x333 JUMPI DUP1 MLOAD DUP1 DUP3 PUSH1 0x20 ADD REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH4 0xA12F521 PUSH1 0xE1 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x362 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x377 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x227 DUP3 PUSH2 0x34C JUMP JUMPDEST PUSH0 DUP1 PUSH0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x392 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x39B DUP5 PUSH2 0x34C JUMP JUMPDEST SWAP3 POP PUSH2 0x3A9 PUSH1 0x20 DUP6 ADD PUSH2 0x34C JUMP JUMPDEST SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x3C9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x227 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 DUP3 MLOAD PUSH0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x3F7 JUMPI PUSH1 0x20 DUP2 DUP7 ADD DUP2 ADD MLOAD DUP6 DUP4 ADD MSTORE ADD PUSH2 0x3DD JUMP JUMPDEST POP PUSH0 SWAP3 ADD SWAP2 DUP3 MSTORE POP SWAP2 SWAP1 POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x1E DUP16 0xAA SWAP7 0xC7 0xDC PUSH13 0x8294633C62A9DC85C8573CA561 STATICCALL EXTCODEHASH 0xB3 PUSH10 0x8E0E8566D33283F36473 PUSH16 0x6C634300081400330000000000000000 ",
							"sourceMap": "18637:540:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;18877:81;;;;;;:::i;:::-;;:::i;:::-;;18657:20;;;;;-1:-1:-1;;;;;18657:20:0;;;;;;-1:-1:-1;;;;;547:32:1;;;529:51;;517:2;502:18;18657:20:0;;;;;;;18964:211;;;;;;:::i;:::-;;:::i;18877:81::-;18827:5;;-1:-1:-1;;;;;18827:5:0;18813:10;:19;18805:48;;;;-1:-1:-1;;;18805:48:0;;1126:2:1;18805:48:0;;;1108:21:1;1165:2;1145:18;;;1138:30;-1:-1:-1;;;1184:18:1;;;1177:46;1240:18;;18805:48:0;;;;;;;;;18937:5:::1;:14:::0;;-1:-1:-1;;;;;;18937:14:0::1;-1:-1:-1::0;;;;;18937:14:0;;;::::1;::::0;;;::::1;::::0;;18877:81::o;18964:211::-;18827:5;;-1:-1:-1;;;;;18827:5:0;18813:10;:19;18805:48;;;;-1:-1:-1;;;18805:48:0;;1126:2:1;18805:48:0;;;1108:21:1;1165:2;1145:18;;;1138:30;-1:-1:-1;;;1184:18:1;;;1177:46;1240:18;;18805:48:0;924:340:1;18805:48:0;19124:44:::1;-1:-1:-1::0;;;;;19124:26:0;::::1;19151:8:::0;19161:6;19124:26:::1;:44::i;:::-;18964:211:::0;;;:::o;14118:160::-;14227:43;;;-1:-1:-1;;;;;1461:32:1;;;14227:43:0;;;1443:51:1;1510:18;;;;1503:34;;;14227:43:0;;;;;;;;;;1416:18:1;;;;14227:43:0;;;;;;;;-1:-1:-1;;;;;14227:43:0;-1:-1:-1;;;14227:43:0;;;14200:71;;14220:5;;14227:43;-1:-1:-1;;17319:33:0;;14242:14;;14227:43;17319:27;:33::i;:::-;17293:59;;17366:10;:17;17387:1;17366:22;;:57;;;;;17404:10;17393:30;;;;;;;;;;;;:::i;:::-;17392:31;17366:57;17362:135;;;17446:40;;-1:-1:-1;;;17446:40:0;;-1:-1:-1;;;;;547:32:1;;17446:40:0;;;529:51:1;502:18;;17446:40:0;383:203:1;2767:151:0;2842:12;2873:38;2895:6;2903:4;2909:1;2873:21;:38::i;:::-;2866:45;2767:151;-1:-1:-1;;;2767:151:0:o;3242:392::-;3341:12;3393:5;3369:21;:29;3365:108;;;3421:41;;-1:-1:-1;;;3421:41:0;;3456:4;3421:41;;;529:51:1;502:18;;3421:41:0;383:203:1;3365:108:0;3483:12;3497:23;3524:6;-1:-1:-1;;;;;3524:11:0;3543:5;3550:4;3524:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;3482:73;;;;3572:55;3599:6;3607:7;3616:10;3572:26;:55::i;:::-;3565:62;3242:392;-1:-1:-1;;;;;;3242:392:0:o;4687:582::-;4831:12;4860:7;4855:408;;4883:19;4891:10;4883:7;:19::i;:::-;4855:408;;;5107:17;;:22;:49;;;;-1:-1:-1;;;;;;5133:18:0;;;:23;5107:49;5103:119;;;5183:24;;-1:-1:-1;;;5183:24:0;;-1:-1:-1;;;;;547:32:1;;5183:24:0;;;529:51:1;502:18;;5183:24:0;383:203:1;5103:119:0;-1:-1:-1;5242:10:0;5235:17;;5805:516;5936:17;;:21;5932:383;;6164:10;6158:17;6220:15;6207:10;6203:2;6199:19;6192:44;5932:383;6287:17;;-1:-1:-1;;;6287:17:0;;;;;;;;;;;14:173:1;82:20;;-1:-1:-1;;;;;131:31:1;;121:42;;111:70;;177:1;174;167:12;111:70;14:173;;;:::o;192:186::-;251:6;304:2;292:9;283:7;279:23;275:32;272:52;;;320:1;317;310:12;272:52;343:29;362:9;343:29;:::i;591:328::-;668:6;676;684;737:2;725:9;716:7;712:23;708:32;705:52;;;753:1;750;743:12;705:52;776:29;795:9;776:29;:::i;:::-;766:39;;824:38;858:2;847:9;843:18;824:38;:::i;:::-;814:48;;909:2;898:9;894:18;881:32;871:42;;591:328;;;;;:::o;1548:277::-;1615:6;1668:2;1656:9;1647:7;1643:23;1639:32;1636:52;;;1684:1;1681;1674:12;1636:52;1716:9;1710:16;1769:5;1762:13;1755:21;1748:5;1745:32;1735:60;;1791:1;1788;1781:12;1830:412;1959:3;1997:6;1991:13;2022:1;2032:129;2046:6;2043:1;2040:13;2032:129;;;2144:4;2128:14;;;2124:25;;2118:32;2105:11;;;2098:53;2061:12;2032:129;;;-1:-1:-1;2216:1:1;2180:16;;2205:13;;;-1:-1:-1;2180:16:1;1830:412;-1:-1:-1;1830:412:1:o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "216400",
								"executionCost": "24489",
								"totalCost": "240889"
							},
							"external": {
								"owner()": "2323",
								"safeTransfer(address,address,uint256)": "infinite",
								"setOwner(address)": "26685"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 18720,
									"end": 18768,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "POP",
									"source": -1
								},
								{
									"begin": 18743,
									"end": 18748,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "SLOAD",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "1"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "A0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SUB",
									"source": -1
								},
								{
									"begin": -1,
									"end": -1,
									"name": "NOT",
									"source": -1
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "AND",
									"source": 0
								},
								{
									"begin": 18751,
									"end": 18761,
									"name": "CALLER",
									"source": 0
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "OR",
									"source": 0
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "SWAP1",
									"source": 0
								},
								{
									"begin": 18743,
									"end": 18761,
									"name": "SSTORE",
									"source": 0
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 18637,
									"end": 19177,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212201e8faa96c7dc6c8294633c62a9dc85c8573ca561fa3fb3698e0e8566d33283f364736f6c63430008140033",
									".code": [
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "13AF4035"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "8DA5CB5B"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "D1660F99"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18637,
											"end": 19177,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 18877,
											"end": 18958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 18877,
											"end": 18958,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 529,
											"end": 580,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 517,
											"end": 519,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18657,
											"end": 18677,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 18964,
											"end": 19175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 18964,
											"end": 19175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 18877,
											"end": 18958,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18813,
											"end": 18823,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 18813,
											"end": 18832,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1129,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1165,
											"end": 1167,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1138,
											"end": 1168,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "22A92927A92FA822A926A4A9A9A4A7A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "PUSH",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1223,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1240,
											"end": 1258,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1240,
											"end": 1258,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "tag",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18942,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 18937,
											"end": 18951,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"modifierDepth": 1,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 18937,
											"end": 18951,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 18877,
											"end": 18958,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 18827,
											"end": 18832,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 18813,
											"end": 18823,
											"name": "CALLER",
											"source": 0
										},
										{
											"begin": 18813,
											"end": 18832,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1126,
											"end": 1128,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1108,
											"end": 1129,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1165,
											"end": 1167,
											"name": "PUSH",
											"source": 1,
											"value": "10"
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1145,
											"end": 1163,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1138,
											"end": 1168,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "22A92927A92FA822A926A4A9A9A4A7A7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "81"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "PUSH",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1184,
											"end": 1202,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1177,
											"end": 1223,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1240,
											"end": 1258,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1240,
											"end": 1258,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 924,
											"end": 1264,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 18805,
											"end": 18853,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 19124,
											"end": 19168,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 19124,
											"end": 19150,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 19124,
											"end": 19150,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 19151,
											"end": 19159,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19161,
											"end": 19167,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 19124,
											"end": 19150,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 19124,
											"end": 19168,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 19124,
											"end": 19168,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 19124,
											"end": 19168,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 18964,
											"end": 19175,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 14118,
											"end": 14278,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 14118,
											"end": 14278,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1461,
											"end": 1493,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1461,
											"end": 1493,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1461,
											"end": 1493,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "PUSH",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 1443,
											"end": 1494,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 1510,
											"end": 1528,
											"name": "PUSH",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 1510,
											"end": 1528,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1510,
											"end": 1528,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1510,
											"end": 1528,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1503,
											"end": 1537,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 1503,
											"end": 1537,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1503,
											"end": 1537,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 1416,
											"end": 1434,
											"name": "PUSH",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1416,
											"end": 1434,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1416,
											"end": 1434,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1416,
											"end": 1434,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A9059CBB"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 14200,
											"end": 14271,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 14200,
											"end": 14271,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14220,
											"end": 14225,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 14220,
											"end": 14225,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SWAP1",
											"source": -1
										},
										{
											"begin": 17319,
											"end": 17352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 17319,
											"end": 17352,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 14242,
											"end": 14256,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 14242,
											"end": 14256,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 14227,
											"end": 14270,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 17319,
											"end": 17346,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 17319,
											"end": 17352,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17319,
											"end": 17352,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 17319,
											"end": 17352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17293,
											"end": 17352,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17293,
											"end": 17352,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17376,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17383,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17387,
											"end": 17388,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 17366,
											"end": 17388,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17388,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 17404,
											"end": 17414,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 17393,
											"end": 17423,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 17393,
											"end": 17423,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17392,
											"end": 17423,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 17366,
											"end": 17423,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 17362,
											"end": 17497,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 17362,
											"end": 17497,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 17362,
											"end": 17497,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "5274AFE7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 17446,
											"end": 17486,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 383,
											"end": 586,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2767,
											"end": 2918,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2767,
											"end": 2918,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2842,
											"end": 2854,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 2873,
											"end": 2911,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 2895,
											"end": 2901,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2903,
											"end": 2907,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 2909,
											"end": 2910,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 2873,
											"end": 2894,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 2873,
											"end": 2911,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2873,
											"end": 2911,
											"name": "tag",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 2873,
											"end": 2911,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2866,
											"end": 2911,
											"name": "SWAP4",
											"source": 0
										},
										{
											"begin": 2767,
											"end": 2918,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2767,
											"end": 2918,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3242,
											"end": 3634,
											"name": "tag",
											"source": 0,
											"value": "44"
										},
										{
											"begin": 3242,
											"end": 3634,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3341,
											"end": 3353,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3393,
											"end": 3398,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3369,
											"end": 3390,
											"name": "SELFBALANCE",
											"source": 0
										},
										{
											"begin": 3369,
											"end": 3398,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 3365,
											"end": 3473,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 3365,
											"end": 3473,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 3365,
											"end": 3473,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "CD786059"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3456,
											"end": 3460,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 3421,
											"end": 3462,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 383,
											"end": 586,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 3365,
											"end": 3473,
											"name": "tag",
											"source": 0,
											"value": "46"
										},
										{
											"begin": 3365,
											"end": 3473,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3483,
											"end": 3495,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3497,
											"end": 3520,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3530,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3524,
											"end": 3535,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3543,
											"end": 3548,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3550,
											"end": 3554,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "49"
										},
										{
											"begin": 3524,
											"end": 3555,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "48"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP6",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP8",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "GAS",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "CALL",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "1F"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "NOT",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "3F"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "RETURNDATASIZE",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "RETURNDATACOPY",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "52"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "tag",
											"source": 0,
											"value": "51"
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3524,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3482,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3482,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3482,
											"end": 3555,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3482,
											"end": 3555,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3627,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 3599,
											"end": 3605,
											"name": "DUP7",
											"source": 0
										},
										{
											"begin": 3607,
											"end": 3614,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3616,
											"end": 3626,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3598,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 3572,
											"end": 3627,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3627,
											"name": "tag",
											"source": 0,
											"value": "53"
										},
										{
											"begin": 3572,
											"end": 3627,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3565,
											"end": 3627,
											"name": "SWAP7",
											"source": 0
										},
										{
											"begin": 3242,
											"end": 3634,
											"name": "SWAP6",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 3242,
											"end": 3634,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4687,
											"end": 5269,
											"name": "tag",
											"source": 0,
											"value": "54"
										},
										{
											"begin": 4687,
											"end": 5269,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4831,
											"end": 4843,
											"name": "PUSH",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 4860,
											"end": 4867,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4902,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4891,
											"end": 4901,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4890,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 4883,
											"end": 4902,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4883,
											"end": 4902,
											"name": "tag",
											"source": 0,
											"value": "57"
										},
										{
											"begin": 4883,
											"end": 4902,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "tag",
											"source": 0,
											"value": "56"
										},
										{
											"begin": 4855,
											"end": 5263,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5124,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5124,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5129,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 5133,
											"end": 5151,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 5133,
											"end": 5151,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 5133,
											"end": 5151,
											"name": "EXTCODESIZE",
											"source": 0
										},
										{
											"begin": 5133,
											"end": 5156,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "tag",
											"source": 0,
											"value": "60"
										},
										{
											"begin": 5107,
											"end": 5156,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5103,
											"end": 5222,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5103,
											"end": 5222,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5103,
											"end": 5222,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "9996B315"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 547,
											"end": 579,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 529,
											"end": 580,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 502,
											"end": 520,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 502,
											"end": 520,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 5183,
											"end": 5207,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 383,
											"end": 586,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 5103,
											"end": 5222,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 5103,
											"end": 5222,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 5242,
											"end": 5252,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5235,
											"end": 5252,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "43"
										},
										{
											"begin": 5235,
											"end": 5252,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 5805,
											"end": 6321,
											"name": "tag",
											"source": 0,
											"value": "58"
										},
										{
											"begin": 5805,
											"end": 6321,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 5936,
											"end": 5953,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 5936,
											"end": 5953,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 5936,
											"end": 5957,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 5932,
											"end": 6315,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5932,
											"end": 6315,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 6164,
											"end": 6174,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6158,
											"end": 6175,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6220,
											"end": 6235,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6207,
											"end": 6217,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 6203,
											"end": 6205,
											"name": "PUSH",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 6199,
											"end": 6218,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6192,
											"end": 6236,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 5932,
											"end": 6315,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 5932,
											"end": 6315,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A12F521"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 6287,
											"end": 6304,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 14,
											"end": 187,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 14,
											"end": 187,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 82,
											"end": 102,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 82,
											"end": 102,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 131,
											"end": 162,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 121,
											"end": 163,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 121,
											"end": 163,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 111,
											"end": 181,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 177,
											"end": 178,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 174,
											"end": 175,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 167,
											"end": 179,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 111,
											"end": 181,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 111,
											"end": 181,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 187,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 192,
											"end": 378,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 192,
											"end": 378,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 251,
											"end": 257,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 304,
											"end": 306,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 292,
											"end": 301,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 283,
											"end": 290,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 279,
											"end": 302,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 275,
											"end": 307,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 272,
											"end": 324,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 272,
											"end": 324,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 320,
											"end": 321,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 317,
											"end": 318,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 310,
											"end": 322,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 272,
											"end": 324,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 272,
											"end": 324,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 362,
											"end": 371,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 343,
											"end": 372,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 343,
											"end": 372,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "tag",
											"source": 1,
											"value": "16"
										},
										{
											"begin": 591,
											"end": 919,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 668,
											"end": 674,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 676,
											"end": 682,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 684,
											"end": 690,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 737,
											"end": 739,
											"name": "PUSH",
											"source": 1,
											"value": "60"
										},
										{
											"begin": 725,
											"end": 734,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 716,
											"end": 723,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 712,
											"end": 735,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 708,
											"end": 740,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 705,
											"end": 757,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 705,
											"end": 757,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 705,
											"end": 757,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 753,
											"end": 754,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 750,
											"end": 751,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 743,
											"end": 755,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 705,
											"end": 757,
											"name": "tag",
											"source": 1,
											"value": "75"
										},
										{
											"begin": 705,
											"end": 757,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 776,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 795,
											"end": 804,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 776,
											"end": 805,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 776,
											"end": 805,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 776,
											"end": 805,
											"name": "tag",
											"source": 1,
											"value": "76"
										},
										{
											"begin": 776,
											"end": 805,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 766,
											"end": 805,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 766,
											"end": 805,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 824,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 858,
											"end": 860,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 847,
											"end": 856,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 843,
											"end": 861,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 824,
											"end": 862,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 824,
											"end": 862,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 824,
											"end": 862,
											"name": "tag",
											"source": 1,
											"value": "77"
										},
										{
											"begin": 824,
											"end": 862,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 814,
											"end": 862,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 814,
											"end": 862,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 909,
											"end": 911,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 898,
											"end": 907,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 894,
											"end": 912,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 881,
											"end": 913,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 871,
											"end": 913,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 871,
											"end": 913,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 591,
											"end": 919,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 1548,
											"end": 1825,
											"name": "tag",
											"source": 1,
											"value": "39"
										},
										{
											"begin": 1548,
											"end": 1825,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1615,
											"end": 1621,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1668,
											"end": 1670,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1656,
											"end": 1665,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1647,
											"end": 1654,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 1643,
											"end": 1666,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1639,
											"end": 1671,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1684,
											"end": 1685,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1681,
											"end": 1682,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1674,
											"end": 1686,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 1636,
											"end": 1688,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1716,
											"end": 1725,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1710,
											"end": 1726,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 1769,
											"end": 1774,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1762,
											"end": 1775,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1755,
											"end": 1776,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1748,
											"end": 1753,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1745,
											"end": 1777,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 1735,
											"end": 1795,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "43"
										},
										{
											"begin": 1735,
											"end": 1795,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1791,
											"end": 1792,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1788,
											"end": 1789,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 1781,
											"end": 1793,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1830,
											"end": 2242,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 1830,
											"end": 2242,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1959,
											"end": 1962,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1997,
											"end": 2003,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1991,
											"end": 2004,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2022,
											"end": 2023,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "tag",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2046,
											"end": 2052,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2043,
											"end": 2044,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2040,
											"end": 2053,
											"name": "LT",
											"source": 1
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2144,
											"end": 2148,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 2128,
											"end": 2142,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2128,
											"end": 2142,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 2128,
											"end": 2142,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2124,
											"end": 2149,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2124,
											"end": 2149,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2118,
											"end": 2150,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 2105,
											"end": 2116,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 2105,
											"end": 2116,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 2105,
											"end": 2116,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2098,
											"end": 2151,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2061,
											"end": 2073,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "84"
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "tag",
											"source": 1,
											"value": "86"
										},
										{
											"begin": 2032,
											"end": 2161,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2216,
											"end": 2217,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2180,
											"end": 2196,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 2180,
											"end": 2196,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 2205,
											"end": 2218,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 2205,
											"end": 2218,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 2205,
											"end": 2218,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 2180,
											"end": 2196,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1830,
											"end": 2242,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1830,
											"end": 2242,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 1
										}
									]
								}
							},
							"sourceList": [
								"NFT_dive_engine/testTransfer.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"safeTransfer(address,address,uint256)": "d1660f99",
							"setOwner(address)": "13af4035"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"safeTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"setOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NFT_dive_engine/testTransfer.sol\":\"Bank\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"NFT_dive_engine/testTransfer.sol\":{\"keccak256\":\"0x263626e1043b91c6bc01df96ca252fb9df13854e53fbf14dda57b33317b95578\",\"urls\":[\"bzz-raw://81afaaf6fd917ab0c1cda23e93b46da0d5f7f37981f0ce0cba4b697385aaf707\",\"dweb:/ipfs/QmYxoqK7Kc2gLNbWX6ctpypRkq94oxBz7kUKynxmtpSJ6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 650,
								"contract": "NFT_dive_engine/testTransfer.sol:Bank",
								"label": "owner",
								"offset": 0,
								"slot": "0",
								"type": "t_address"
							}
						],
						"types": {
							"t_address": {
								"encoding": "inplace",
								"label": "address",
								"numberOfBytes": "20"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Approval",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"indexed": false,
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "Transfer",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								}
							],
							"name": "allowance",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "approve",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "balanceOf",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "totalSupply",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transfer",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "from",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "to",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								}
							],
							"name": "transferFrom",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 standard as defined in the ERC.",
						"events": {
							"Approval(address,address,uint256)": {
								"details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
							},
							"Transfer(address,address,uint256)": {
								"details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
							}
						},
						"kind": "dev",
						"methods": {
							"allowance(address,address)": {
								"details": "Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."
							},
							"approve(address,uint256)": {
								"details": "Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."
							},
							"balanceOf(address)": {
								"details": "Returns the value of tokens owned by `account`."
							},
							"totalSupply()": {
								"details": "Returns the value of tokens in existence."
							},
							"transfer(address,uint256)": {
								"details": "Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							},
							"transferFrom(address,address,uint256)": {
								"details": "Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"allowance(address,address)": "dd62ed3e",
							"approve(address,uint256)": "095ea7b3",
							"balanceOf(address)": "70a08231",
							"totalSupply()": "18160ddd",
							"transfer(address,uint256)": "a9059cbb",
							"transferFrom(address,address,uint256)": "23b872dd"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 standard as defined in the ERC.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets a `value` amount of tokens as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the value of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the value of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves a `value` amount of tokens from `from` to `to` using the allowance mechanism. `value` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NFT_dive_engine/testTransfer.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"NFT_dive_engine/testTransfer.sol\":{\"keccak256\":\"0x263626e1043b91c6bc01df96ca252fb9df13854e53fbf14dda57b33317b95578\",\"urls\":[\"bzz-raw://81afaaf6fd917ab0c1cda23e93b46da0d5f7f37981f0ce0cba4b697385aaf707\",\"dweb:/ipfs/QmYxoqK7Kc2gLNbWX6ctpypRkq94oxBz7kUKynxmtpSJ6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"IERC20Permit": {
					"abi": [
						{
							"inputs": [],
							"name": "DOMAIN_SEPARATOR",
							"outputs": [
								{
									"internalType": "bytes32",
									"name": "",
									"type": "bytes32"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "nonces",
							"outputs": [
								{
									"internalType": "uint256",
									"name": "",
									"type": "uint256"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "value",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "deadline",
									"type": "uint256"
								},
								{
									"internalType": "uint8",
									"name": "v",
									"type": "uint8"
								},
								{
									"internalType": "bytes32",
									"name": "r",
									"type": "bytes32"
								},
								{
									"internalType": "bytes32",
									"name": "s",
									"type": "bytes32"
								}
							],
							"name": "permit",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.",
						"kind": "dev",
						"methods": {
							"DOMAIN_SEPARATOR()": {
								"details": "Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
							},
							"nonces(address)": {
								"details": "Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."
							},
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": {
								"details": "Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"DOMAIN_SEPARATOR()": "3644e515",
							"nonces(address)": "7ecebe00",
							"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)": "d505accf"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[ERC-2612]. Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all. ==== Security Considerations There are two important considerations concerning the use of `permit`. The first is that a valid permit signature expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be considered as an intention to spend the allowance in any specific way. The second is that because permits have built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be generally recommended is: ```solidity function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}     doThing(..., value); } function doThing(..., uint256 value) public {     token.safeTransferFrom(msg.sender, address(this), value);     ... } ``` Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also {SafeERC20-safeTransferFrom}). Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so contracts should have entry points that don't rely on permit.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NFT_dive_engine/testTransfer.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"NFT_dive_engine/testTransfer.sol\":{\"keccak256\":\"0x263626e1043b91c6bc01df96ca252fb9df13854e53fbf14dda57b33317b95578\",\"urls\":[\"bzz-raw://81afaaf6fd917ab0c1cda23e93b46da0d5f7f37981f0ce0cba4b697385aaf707\",\"dweb:/ipfs/QmYxoqK7Kc2gLNbWX6ctpypRkq94oxBz7kUKynxmtpSJ6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				},
				"SafeERC20": {
					"abi": [
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "spender",
									"type": "address"
								},
								{
									"internalType": "uint256",
									"name": "currentAllowance",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "requestedDecrease",
									"type": "uint256"
								}
							],
							"name": "SafeERC20FailedDecreaseAllowance",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "token",
									"type": "address"
								}
							],
							"name": "SafeERC20FailedOperation",
							"type": "error"
						}
					],
					"devdoc": {
						"details": "Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.",
						"errors": {
							"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)": [
								{
									"details": "Indicates a failed `decreaseAllowance` request."
								}
							],
							"SafeERC20FailedOperation(address)": [
								{
									"details": "An operation with an ERC-20 token failed."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"title": "SafeERC20",
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"NFT_dive_engine/testTransfer.sol\":13565:18584  library SafeERC20 {... */\n  dataSize(sub_0)\n  dataOffset(sub_0)\n  0x0b\n  dup3\n  dup3\n  dup3\n  codecopy\n  dup1\n  mload\n  0x00\n  byte\n  0x73\n  eq\n  tag_1\n  jumpi\n  mstore(0x00, shl(0xe0, 0x4e487b71))\n  mstore(0x04, 0x00)\n  revert(0x00, 0x24)\ntag_1:\n  mstore(0x00, address)\n  0x73\n  dup2\n  mstore8\n  dup3\n  dup2\n  return\nstop\n\nsub_0: assembly {\n        /* \"NFT_dive_engine/testTransfer.sol\":13565:18584  library SafeERC20 {... */\n      eq(address, deployTimeAddress())\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122092593c4cdd6c4f58bc53d5ee42e23f1f5bdf809fff62cc8aaab5b4da87c37d4a64736f6c63430008140033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122092593c4cdd6c4f58bc53d5ee42e23f1f5bdf809fff62cc8aaab5b4da87c37d4a64736f6c63430008140033",
							"opcodes": "PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 MSIZE EXTCODECOPY 0x4C 0xDD PUSH13 0x4F58BC53D5EE42E23F1F5BDF80 SWAP16 SELFDESTRUCT PUSH3 0xCC8AAA 0xB5 0xB4 0xDA DUP8 0xC3 PUSH30 0x4A64736F6C63430008140033000000000000000000000000000000000000 ",
							"sourceMap": "13565:5019:0:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;13565:5019:0;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122092593c4cdd6c4f58bc53d5ee42e23f1f5bdf809fff62cc8aaab5b4da87c37d4a64736f6c63430008140033",
							"opcodes": "PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP3 MSIZE EXTCODECOPY 0x4C 0xDD PUSH13 0x4F58BC53D5EE42E23F1F5BDF80 SWAP16 SELFDESTRUCT PUSH3 0xCC8AAA 0xB5 0xB4 0xDA DUP8 0xC3 PUSH30 0x4A64736F6C63430008140033000000000000000000000000000000000000 ",
							"sourceMap": "13565:5019:0:-:0;;;;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "17000",
								"executionCost": "96",
								"totalCost": "17096"
							},
							"internal": {
								"_callOptionalReturn(contract IERC20,bytes memory)": "infinite",
								"_callOptionalReturnBool(contract IERC20,bytes memory)": "infinite",
								"forceApprove(contract IERC20,address,uint256)": "infinite",
								"safeDecreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeIncreaseAllowance(contract IERC20,address,uint256)": "infinite",
								"safeTransfer(contract IERC20,address,uint256)": "infinite",
								"safeTransferFrom(contract IERC20,address,address,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "B"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "MLOAD",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "BYTE",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "EQ",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "4E487B71"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "PUSH",
									"source": -1,
									"value": "E0"
								},
								{
									"begin": -1,
									"end": -1,
									"name": "SHL",
									"source": -1
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "4"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "24"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "ADDRESS",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "PUSH",
									"source": 0,
									"value": "73"
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "MSTORE8",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP3",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "DUP2",
									"source": 0
								},
								{
									"begin": 13565,
									"end": 18584,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122092593c4cdd6c4f58bc53d5ee42e23f1f5bdf809fff62cc8aaab5b4da87c37d4a64736f6c63430008140033",
									".code": [
										{
											"begin": 13565,
											"end": 18584,
											"name": "PUSHDEPLOYADDRESS",
											"source": 0
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "ADDRESS",
											"source": 0
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 13565,
											"end": 18584,
											"name": "REVERT",
											"source": 0
										}
									]
								}
							},
							"sourceList": [
								"NFT_dive_engine/testTransfer.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentAllowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestedDecrease\",\"type\":\"uint256\"}],\"name\":\"SafeERC20FailedDecreaseAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"}],\"devdoc\":{\"details\":\"Wrappers around ERC-20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"errors\":{\"SafeERC20FailedDecreaseAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failed `decreaseAllowance` request.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC-20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"NFT_dive_engine/testTransfer.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"NFT_dive_engine/testTransfer.sol\":{\"keccak256\":\"0x263626e1043b91c6bc01df96ca252fb9df13854e53fbf14dda57b33317b95578\",\"urls\":[\"bzz-raw://81afaaf6fd917ab0c1cda23e93b46da0d5f7f37981f0ce0cba4b697385aaf707\",\"dweb:/ipfs/QmYxoqK7Kc2gLNbWX6ctpypRkq94oxBz7kUKynxmtpSJ6D\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "1878",
				"formattedMessage": "Warning: SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.\n--> NFT_dive_engine/testTransfer.sol\n\n",
				"message": "SPDX license identifier not provided in source file. Before publishing, consider adding a comment containing \"SPDX-License-Identifier: <SPDX-License>\" to each source file. Use \"SPDX-License-Identifier: UNLICENSED\" for non-open-source code. Please see https://spdx.org for more information.",
				"severity": "warning",
				"sourceLocation": {
					"end": -1,
					"file": "NFT_dive_engine/testTransfer.sol",
					"start": -1
				},
				"type": "Warning"
			}
		],
		"sources": {
			"NFT_dive_engine/testTransfer.sol": {
				"ast": {
					"absolutePath": "NFT_dive_engine/testTransfer.sol",
					"exportedSymbols": {
						"Address": [
							252
						],
						"Bank": [
							708
						],
						"IERC20": [
							364
						],
						"IERC20Permit": [
							287
						],
						"SafeERC20": [
							647
						]
					},
					"id": 709,
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "164:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Address",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 2,
								"nodeType": "StructuredDocumentation",
								"src": "189:67:0",
								"text": " @dev Collection of functions related to the address type"
							},
							"fullyImplemented": true,
							"id": 252,
							"linearizedBaseContracts": [
								252
							],
							"name": "Address",
							"nameLocation": "265:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 3,
										"nodeType": "StructuredDocumentation",
										"src": "279:94:0",
										"text": " @dev The ETH balance of the account is not enough to perform the operation."
									},
									"errorSelector": "cd786059",
									"id": 7,
									"name": "AddressInsufficientBalance",
									"nameLocation": "384:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 6,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 5,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "419:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 7,
												"src": "411:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 4,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "411:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "410:17:0"
									},
									"src": "378:50:0"
								},
								{
									"documentation": {
										"id": 8,
										"nodeType": "StructuredDocumentation",
										"src": "434:75:0",
										"text": " @dev There's no code at `target` (it is not a contract)."
									},
									"errorSelector": "9996b315",
									"id": 12,
									"name": "AddressEmptyCode",
									"nameLocation": "520:16:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 10,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "545:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "537:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "537:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "536:16:0"
									},
									"src": "514:39:0"
								},
								{
									"documentation": {
										"id": 13,
										"nodeType": "StructuredDocumentation",
										"src": "559:89:0",
										"text": " @dev A call to an address target failed. The target may have reverted."
									},
									"errorSelector": "1425ea42",
									"id": 15,
									"name": "FailedInnerCall",
									"nameLocation": "659:15:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 14,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "674:2:0"
									},
									"src": "653:24:0"
								},
								{
									"body": {
										"id": 55,
										"nodeType": "Block",
										"src": "1664:260:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 25,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "1686:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$252",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$252",
																		"typeString": "library Address"
																	}
																],
																"id": 24,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "1678:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 23,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "1678:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 26,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "1678:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 27,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "1692:7:0",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "1678:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 28,
														"name": "amount",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "1702:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1678:30:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 38,
												"nodeType": "IfStatement",
												"src": "1674:109:0",
												"trueBody": {
													"id": 37,
													"nodeType": "Block",
													"src": "1710:73:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 33,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "1766:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$252",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$252",
																					"typeString": "library Address"
																				}
																			],
																			"id": 32,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "1758:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 31,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "1758:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 34,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "1758:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 30,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "1731:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 35,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1731:41:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 36,
															"nodeType": "RevertStatement",
															"src": "1724:48:0"
														}
													]
												}
											},
											{
												"assignments": [
													40,
													null
												],
												"declarations": [
													{
														"constant": false,
														"id": 40,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "1799:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 55,
														"src": "1794:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 39,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "1794:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													null
												],
												"id": 47,
												"initialValue": {
													"arguments": [
														{
															"hexValue": "",
															"id": 45,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "1842:2:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															},
															"value": ""
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																"typeString": "literal_string \"\""
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470",
																	"typeString": "literal_string \"\""
																}
															],
															"expression": {
																"id": 41,
																"name": "recipient",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 18,
																"src": "1812:9:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address_payable",
																	"typeString": "address payable"
																}
															},
															"id": 42,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "1822:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "1812:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 44,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 43,
																"name": "amount",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 20,
																"src": "1834:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "1812:29:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1812:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "1793:52:0"
											},
											{
												"condition": {
													"id": 49,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "1859:8:0",
													"subExpression": {
														"id": 48,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 40,
														"src": "1860:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 54,
												"nodeType": "IfStatement",
												"src": "1855:63:0",
												"trueBody": {
													"id": 53,
													"nodeType": "Block",
													"src": "1869:49:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 50,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "1890:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "1890:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 52,
															"nodeType": "RevertStatement",
															"src": "1883:24:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 16,
										"nodeType": "StructuredDocumentation",
										"src": "683:905:0",
										"text": " @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
									},
									"id": 56,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "sendValue",
									"nameLocation": "1602:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 21,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 18,
												"mutability": "mutable",
												"name": "recipient",
												"nameLocation": "1628:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "1612:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address_payable",
													"typeString": "address payable"
												},
												"typeName": {
													"id": 17,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1612:15:0",
													"stateMutability": "payable",
													"typeDescriptions": {
														"typeIdentifier": "t_address_payable",
														"typeString": "address payable"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 20,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "1647:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 56,
												"src": "1639:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 19,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1639:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1611:43:0"
									},
									"returnParameters": {
										"id": 22,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1664:0:0"
									},
									"scope": 252,
									"src": "1593:331:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 72,
										"nodeType": "Block",
										"src": "2856:62:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 67,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 59,
															"src": "2895:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 68,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 61,
															"src": "2903:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														{
															"hexValue": "30",
															"id": 69,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "2909:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															},
															{
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															}
														],
														"id": 66,
														"name": "functionCallWithValue",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 119,
														"src": "2873:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bytes memory,uint256) returns (bytes memory)"
														}
													},
													"id": 70,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2873:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 65,
												"id": 71,
												"nodeType": "Return",
												"src": "2866:45:0"
											}
										]
									},
									"documentation": {
										"id": 57,
										"nodeType": "StructuredDocumentation",
										"src": "1930:832:0",
										"text": " @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason or custom error, it is bubbled\n up by this function (like regular Solidity function calls). However, if\n the call reverted with no returned reason, this function reverts with a\n {FailedInnerCall} error.\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert."
									},
									"id": 73,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCall",
									"nameLocation": "2776:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "2797:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2789:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 58,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2789:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "2818:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2805:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 60,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2805:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2788:35:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "2842:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 63,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "2842:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2841:14:0"
									},
									"scope": 252,
									"src": "2767:151:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 118,
										"nodeType": "Block",
										"src": "3355:279:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 91,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 87,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "3377:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_Address_$252",
																		"typeString": "library Address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_Address_$252",
																		"typeString": "library Address"
																	}
																],
																"id": 86,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3369:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 85,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3369:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 88,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3369:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 89,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3383:7:0",
														"memberName": "balance",
														"nodeType": "MemberAccess",
														"src": "3369:21:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 90,
														"name": "value",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 80,
														"src": "3393:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "3369:29:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 100,
												"nodeType": "IfStatement",
												"src": "3365:108:0",
												"trueBody": {
													"id": 99,
													"nodeType": "Block",
													"src": "3400:73:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 95,
																				"name": "this",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967268,
																				"src": "3456:4:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_Address_$252",
																					"typeString": "library Address"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_Address_$252",
																					"typeString": "library Address"
																				}
																			],
																			"id": 94,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3448:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 93,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3448:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 96,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3448:13:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 92,
																	"name": "AddressInsufficientBalance",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 7,
																	"src": "3421:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 97,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3421:41:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 98,
															"nodeType": "RevertStatement",
															"src": "3414:48:0"
														}
													]
												}
											},
											{
												"assignments": [
													102,
													104
												],
												"declarations": [
													{
														"constant": false,
														"id": 102,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3488:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 118,
														"src": "3483:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 101,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3483:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 104,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3510:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 118,
														"src": "3497:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 103,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3497:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 111,
												"initialValue": {
													"arguments": [
														{
															"id": 109,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 78,
															"src": "3550:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"expression": {
																"id": 105,
																"name": "target",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 76,
																"src": "3524:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"id": 106,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "3531:4:0",
															"memberName": "call",
															"nodeType": "MemberAccess",
															"src": "3524:11:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
																"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
															}
														},
														"id": 108,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"names": [
															"value"
														],
														"nodeType": "FunctionCallOptions",
														"options": [
															{
																"id": 107,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 80,
																"src": "3543:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															}
														],
														"src": "3524:25:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 110,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3524:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3482:73:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 113,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 76,
															"src": "3599:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 114,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 102,
															"src": "3607:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 115,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 104,
															"src": "3616:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 112,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "3572:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 116,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3572:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 84,
												"id": 117,
												"nodeType": "Return",
												"src": "3565:62:0"
											}
										]
									},
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "2924:313:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`."
									},
									"id": 119,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionCallWithValue",
									"nameLocation": "3251:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 81,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3281:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3273:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 75,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3273:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 78,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3302:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3289:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 77,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3289:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 80,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "3316:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3308:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 79,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "3308:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3272:50:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 83,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 119,
												"src": "3341:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 82,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3341:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3340:14:0"
									},
									"scope": 252,
									"src": "3242:392:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 144,
										"nodeType": "Block",
										"src": "3873:154:0",
										"statements": [
											{
												"assignments": [
													130,
													132
												],
												"declarations": [
													{
														"constant": false,
														"id": 130,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "3889:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 144,
														"src": "3884:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 129,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "3884:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 132,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "3911:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 144,
														"src": "3898:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 131,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "3898:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 137,
												"initialValue": {
													"arguments": [
														{
															"id": 135,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 124,
															"src": "3943:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 133,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 122,
															"src": "3925:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 134,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "3932:10:0",
														"memberName": "staticcall",
														"nodeType": "MemberAccess",
														"src": "3925:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) view returns (bool,bytes memory)"
														}
													},
													"id": 136,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3925:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3883:65:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 139,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 122,
															"src": "3992:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 140,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 130,
															"src": "4000:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 141,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 132,
															"src": "4009:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 138,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "3965:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 142,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3965:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 128,
												"id": 143,
												"nodeType": "Return",
												"src": "3958:62:0"
											}
										]
									},
									"documentation": {
										"id": 120,
										"nodeType": "StructuredDocumentation",
										"src": "3640:128:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call."
									},
									"id": 145,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionStaticCall",
									"nameLocation": "3782:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 125,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "3809:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "3801:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 121,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3801:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 124,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "3830:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "3817:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 123,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3817:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3800:35:0"
									},
									"returnParameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 145,
												"src": "3859:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 126,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "3859:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3858:14:0"
									},
									"scope": 252,
									"src": "3773:254:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 170,
										"nodeType": "Block",
										"src": "4265:156:0",
										"statements": [
											{
												"assignments": [
													156,
													158
												],
												"declarations": [
													{
														"constant": false,
														"id": 156,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "4281:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 170,
														"src": "4276:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 155,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4276:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 158,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "4303:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 170,
														"src": "4290:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 157,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "4290:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 163,
												"initialValue": {
													"arguments": [
														{
															"id": 161,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 150,
															"src": "4337:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"id": 159,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "4317:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 160,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4324:12:0",
														"memberName": "delegatecall",
														"nodeType": "MemberAccess",
														"src": "4317:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) returns (bool,bytes memory)"
														}
													},
													"id": 162,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4317:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4275:67:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 165,
															"name": "target",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 148,
															"src": "4386:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 166,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 156,
															"src": "4394:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"id": 167,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 158,
															"src": "4403:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 164,
														"name": "verifyCallResultFromTarget",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 211,
														"src": "4359:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$",
															"typeString": "function (address,bool,bytes memory) view returns (bytes memory)"
														}
													},
													"id": 168,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4359:55:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"functionReturnParameters": 154,
												"id": 169,
												"nodeType": "Return",
												"src": "4352:62:0"
											}
										]
									},
									"documentation": {
										"id": 146,
										"nodeType": "StructuredDocumentation",
										"src": "4033:130:0",
										"text": " @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call."
									},
									"id": 171,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "functionDelegateCall",
									"nameLocation": "4177:20:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 151,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 148,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4206:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "4198:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 147,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4198:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 150,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "4227:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "4214:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 149,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4214:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4197:35:0"
									},
									"returnParameters": {
										"id": 154,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 153,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 171,
												"src": "4251:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 152,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4251:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4250:14:0"
									},
									"scope": 252,
									"src": "4168:253:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 210,
										"nodeType": "Block",
										"src": "4845:424:0",
										"statements": [
											{
												"condition": {
													"id": 184,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4859:8:0",
													"subExpression": {
														"id": 183,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 176,
														"src": "4860:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 208,
													"nodeType": "Block",
													"src": "4919:344:0",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																},
																"id": 199,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 193,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"id": 190,
																			"name": "returndata",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 178,
																			"src": "5107:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 191,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5118:6:0",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5107:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 192,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5128:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5107:22:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "&&",
																"rightExpression": {
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 198,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"expression": {
																			"expression": {
																				"id": 194,
																				"name": "target",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 174,
																				"src": "5133:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			"id": 195,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "5140:4:0",
																			"memberName": "code",
																			"nodeType": "MemberAccess",
																			"src": "5133:11:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_bytes_memory_ptr",
																				"typeString": "bytes memory"
																			}
																		},
																		"id": 196,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"memberLocation": "5145:6:0",
																		"memberName": "length",
																		"nodeType": "MemberAccess",
																		"src": "5133:18:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "==",
																	"rightExpression": {
																		"hexValue": "30",
																		"id": 197,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5155:1:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_0_by_1",
																			"typeString": "int_const 0"
																		},
																		"value": "0"
																	},
																	"src": "5133:23:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"src": "5107:49:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 205,
															"nodeType": "IfStatement",
															"src": "5103:119:0",
															"trueBody": {
																"id": 204,
																"nodeType": "Block",
																"src": "5158:64:0",
																"statements": [
																	{
																		"errorCall": {
																			"arguments": [
																				{
																					"id": 201,
																					"name": "target",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 174,
																					"src": "5200:6:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_address",
																						"typeString": "address"
																					}
																				],
																				"id": 200,
																				"name": "AddressEmptyCode",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 12,
																				"src": "5183:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																					"typeString": "function (address) pure"
																				}
																			},
																			"id": 202,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5183:24:0",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 203,
																		"nodeType": "RevertStatement",
																		"src": "5176:31:0"
																	}
																]
															}
														},
														{
															"expression": {
																"id": 206,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 178,
																"src": "5242:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 182,
															"id": 207,
															"nodeType": "Return",
															"src": "5235:17:0"
														}
													]
												},
												"id": 209,
												"nodeType": "IfStatement",
												"src": "4855:408:0",
												"trueBody": {
													"id": 189,
													"nodeType": "Block",
													"src": "4869:44:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 186,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 178,
																		"src": "4891:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 185,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 251,
																	"src": "4883:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 187,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4883:19:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 188,
															"nodeType": "ExpressionStatement",
															"src": "4883:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 172,
										"nodeType": "StructuredDocumentation",
										"src": "4427:255:0",
										"text": " @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n unsuccessful call."
									},
									"id": 211,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResultFromTarget",
									"nameLocation": "4696:26:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 179,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 174,
												"mutability": "mutable",
												"name": "target",
												"nameLocation": "4740:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "4732:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 173,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4732:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 176,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "4761:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "4756:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 175,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "4756:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 178,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "4791:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "4778:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 177,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4778:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4722:85:0"
									},
									"returnParameters": {
										"id": 182,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 181,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 211,
												"src": "4831:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 180,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "4831:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4830:14:0"
									},
									"scope": 252,
									"src": "4687:582:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 232,
										"nodeType": "Block",
										"src": "5571:122:0",
										"statements": [
											{
												"condition": {
													"id": 222,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "5585:8:0",
													"subExpression": {
														"id": 221,
														"name": "success",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 214,
														"src": "5586:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 230,
													"nodeType": "Block",
													"src": "5645:42:0",
													"statements": [
														{
															"expression": {
																"id": 228,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 216,
																"src": "5666:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"functionReturnParameters": 220,
															"id": 229,
															"nodeType": "Return",
															"src": "5659:17:0"
														}
													]
												},
												"id": 231,
												"nodeType": "IfStatement",
												"src": "5581:106:0",
												"trueBody": {
													"id": 227,
													"nodeType": "Block",
													"src": "5595:44:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 224,
																		"name": "returndata",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 216,
																		"src": "5617:10:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 223,
																	"name": "_revert",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 251,
																	"src": "5609:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (bytes memory) pure"
																	}
																},
																"id": 225,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5609:19:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 226,
															"nodeType": "ExpressionStatement",
															"src": "5609:19:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 212,
										"nodeType": "StructuredDocumentation",
										"src": "5275:189:0",
										"text": " @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n revert reason or with a default {FailedInnerCall} error."
									},
									"id": 233,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "verifyCallResult",
									"nameLocation": "5478:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 217,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 214,
												"mutability": "mutable",
												"name": "success",
												"nameLocation": "5500:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "5495:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 213,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "5495:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 216,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5522:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "5509:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 215,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5509:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5494:39:0"
									},
									"returnParameters": {
										"id": 220,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 219,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 233,
												"src": "5557:12:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 218,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5557:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5556:14:0"
									},
									"scope": 252,
									"src": "5469:224:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 250,
										"nodeType": "Block",
										"src": "5860:461:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 242,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 239,
															"name": "returndata",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 236,
															"src": "5936:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														},
														"id": 240,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "5947:6:0",
														"memberName": "length",
														"nodeType": "MemberAccess",
														"src": "5936:17:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">",
													"rightExpression": {
														"hexValue": "30",
														"id": 241,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "5956:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"src": "5936:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"falseBody": {
													"id": 248,
													"nodeType": "Block",
													"src": "6266:49:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 245,
																	"name": "FailedInnerCall",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 15,
																	"src": "6287:15:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 246,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6287:17:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 247,
															"nodeType": "RevertStatement",
															"src": "6280:24:0"
														}
													]
												},
												"id": 249,
												"nodeType": "IfStatement",
												"src": "5932:383:0",
												"trueBody": {
													"id": 244,
													"nodeType": "Block",
													"src": "5959:301:0",
													"statements": [
														{
															"AST": {
																"nodeType": "YulBlock",
																"src": "6117:133:0",
																"statements": [
																	{
																		"nodeType": "YulVariableDeclaration",
																		"src": "6135:40:0",
																		"value": {
																			"arguments": [
																				{
																					"name": "returndata",
																					"nodeType": "YulIdentifier",
																					"src": "6164:10:0"
																				}
																			],
																			"functionName": {
																				"name": "mload",
																				"nodeType": "YulIdentifier",
																				"src": "6158:5:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6158:17:0"
																		},
																		"variables": [
																			{
																				"name": "returndata_size",
																				"nodeType": "YulTypedName",
																				"src": "6139:15:0",
																				"type": ""
																			}
																		]
																	},
																	{
																		"expression": {
																			"arguments": [
																				{
																					"arguments": [
																						{
																							"kind": "number",
																							"nodeType": "YulLiteral",
																							"src": "6203:2:0",
																							"type": "",
																							"value": "32"
																						},
																						{
																							"name": "returndata",
																							"nodeType": "YulIdentifier",
																							"src": "6207:10:0"
																						}
																					],
																					"functionName": {
																						"name": "add",
																						"nodeType": "YulIdentifier",
																						"src": "6199:3:0"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "6199:19:0"
																				},
																				{
																					"name": "returndata_size",
																					"nodeType": "YulIdentifier",
																					"src": "6220:15:0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "6192:6:0"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "6192:44:0"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "6192:44:0"
																	}
																]
															},
															"documentation": "@solidity memory-safe-assembly",
															"evmVersion": "shanghai",
															"externalReferences": [
																{
																	"declaration": 236,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6164:10:0",
																	"valueSize": 1
																},
																{
																	"declaration": 236,
																	"isOffset": false,
																	"isSlot": false,
																	"src": "6207:10:0",
																	"valueSize": 1
																}
															],
															"id": 243,
															"nodeType": "InlineAssembly",
															"src": "6108:142:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 234,
										"nodeType": "StructuredDocumentation",
										"src": "5699:101:0",
										"text": " @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}."
									},
									"id": 251,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_revert",
									"nameLocation": "5814:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 237,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 236,
												"mutability": "mutable",
												"name": "returndata",
												"nameLocation": "5835:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 251,
												"src": "5822:23:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 235,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "5822:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5821:25:0"
									},
									"returnParameters": {
										"id": 238,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5860:0:0"
									},
									"scope": 252,
									"src": "5805:516:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 709,
							"src": "257:6066:0",
							"usedErrors": [
								7,
								12,
								15
							],
							"usedEvents": []
						},
						{
							"id": 253,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "6474:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20Permit",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 254,
								"nodeType": "StructuredDocumentation",
								"src": "6499:1965:0",
								"text": " @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\n Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all.\n ==== Security Considerations\n There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\n expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\n considered as an intention to spend the allowance in any specific way. The second is that because permits have\n built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\n take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\n generally recommended is:\n ```solidity\n function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\n     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\n     doThing(..., value);\n }\n function doThing(..., uint256 value) public {\n     token.safeTransferFrom(msg.sender, address(this), value);\n     ...\n }\n ```\n Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\n `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\n {SafeERC20-safeTransferFrom}).\n Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\n contracts should have entry points that don't rely on permit."
							},
							"fullyImplemented": false,
							"id": 287,
							"linearizedBaseContracts": [
								287
							],
							"name": "IERC20Permit",
							"nameLocation": "8475:12:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"documentation": {
										"id": 255,
										"nodeType": "StructuredDocumentation",
										"src": "8494:850:0",
										"text": " @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section].\n CAUTION: See Security Considerations above."
									},
									"functionSelector": "d505accf",
									"id": 272,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "permit",
									"nameLocation": "9358:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 270,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 257,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9382:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9374:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 256,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9374:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 259,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "9405:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9397:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 258,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9397:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 261,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "9430:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9422:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 260,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9422:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 263,
												"mutability": "mutable",
												"name": "deadline",
												"nameLocation": "9453:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9445:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 262,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9445:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 265,
												"mutability": "mutable",
												"name": "v",
												"nameLocation": "9477:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9471:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint8",
													"typeString": "uint8"
												},
												"typeName": {
													"id": 264,
													"name": "uint8",
													"nodeType": "ElementaryTypeName",
													"src": "9471:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint8",
														"typeString": "uint8"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 267,
												"mutability": "mutable",
												"name": "r",
												"nameLocation": "9496:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9488:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 266,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9488:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 269,
												"mutability": "mutable",
												"name": "s",
												"nameLocation": "9515:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 272,
												"src": "9507:9:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 268,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "9507:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9364:158:0"
									},
									"returnParameters": {
										"id": 271,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "9531:0:0"
									},
									"scope": 287,
									"src": "9349:183:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 273,
										"nodeType": "StructuredDocumentation",
										"src": "9538:294:0",
										"text": " @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."
									},
									"functionSelector": "7ecebe00",
									"id": 280,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "nonces",
									"nameLocation": "9846:6:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 276,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 275,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "9861:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "9853:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 274,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "9853:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9852:15:0"
									},
									"returnParameters": {
										"id": 279,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 278,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 280,
												"src": "9891:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 277,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "9891:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "9890:9:0"
									},
									"scope": 287,
									"src": "9837:63:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 281,
										"nodeType": "StructuredDocumentation",
										"src": "9906:128:0",
										"text": " @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."
									},
									"functionSelector": "3644e515",
									"id": 286,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "DOMAIN_SEPARATOR",
									"nameLocation": "10101:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 282,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10117:2:0"
									},
									"returnParameters": {
										"id": 285,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 284,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 286,
												"src": "10143:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes32",
													"typeString": "bytes32"
												},
												"typeName": {
													"id": 283,
													"name": "bytes32",
													"nodeType": "ElementaryTypeName",
													"src": "10143:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes32",
														"typeString": "bytes32"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10142:9:0"
									},
									"scope": 287,
									"src": "10092:60:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 709,
							"src": "8465:1689:0",
							"usedErrors": [],
							"usedEvents": []
						},
						{
							"id": 288,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "10271:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IERC20",
							"contractDependencies": [],
							"contractKind": "interface",
							"documentation": {
								"id": 289,
								"nodeType": "StructuredDocumentation",
								"src": "10296:71:0",
								"text": " @dev Interface of the ERC-20 standard as defined in the ERC."
							},
							"fullyImplemented": false,
							"id": 364,
							"linearizedBaseContracts": [
								364
							],
							"name": "IERC20",
							"nameLocation": "10378:6:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 290,
										"nodeType": "StructuredDocumentation",
										"src": "10391:158:0",
										"text": " @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."
									},
									"eventSelector": "ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
									"id": 298,
									"name": "Transfer",
									"nameLocation": "10560:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 297,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 292,
												"indexed": true,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "10585:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10569:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 291,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10569:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 294,
												"indexed": true,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "10607:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10591:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 293,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10591:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 296,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10619:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 298,
												"src": "10611:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 295,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10611:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10568:57:0"
									},
									"src": "10554:72:0"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 299,
										"nodeType": "StructuredDocumentation",
										"src": "10632:148:0",
										"text": " @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."
									},
									"eventSelector": "8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
									"id": 307,
									"name": "Approval",
									"nameLocation": "10791:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 306,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 301,
												"indexed": true,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "10816:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "10800:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 300,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10800:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 303,
												"indexed": true,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "10839:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "10823:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 302,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "10823:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 305,
												"indexed": false,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "10856:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 307,
												"src": "10848:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 304,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10848:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10799:63:0"
									},
									"src": "10785:78:0"
								},
								{
									"documentation": {
										"id": 308,
										"nodeType": "StructuredDocumentation",
										"src": "10869:65:0",
										"text": " @dev Returns the value of tokens in existence."
									},
									"functionSelector": "18160ddd",
									"id": 313,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "totalSupply",
									"nameLocation": "10948:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 309,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "10959:2:0"
									},
									"returnParameters": {
										"id": 312,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 311,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 313,
												"src": "10985:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 310,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "10985:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "10984:9:0"
									},
									"scope": 364,
									"src": "10939:55:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 314,
										"nodeType": "StructuredDocumentation",
										"src": "11000:71:0",
										"text": " @dev Returns the value of tokens owned by `account`."
									},
									"functionSelector": "70a08231",
									"id": 321,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "balanceOf",
									"nameLocation": "11085:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 317,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 316,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "11103:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "11095:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 315,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11095:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11094:17:0"
									},
									"returnParameters": {
										"id": 320,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 319,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 321,
												"src": "11135:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 318,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11135:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11134:9:0"
									},
									"scope": 364,
									"src": "11076:68:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 322,
										"nodeType": "StructuredDocumentation",
										"src": "11150:213:0",
										"text": " @dev Moves a `value` amount of tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "a9059cbb",
									"id": 331,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transfer",
									"nameLocation": "11377:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 327,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 324,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "11394:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "11386:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 323,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11386:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 326,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "11406:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "11398:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 325,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11398:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11385:27:0"
									},
									"returnParameters": {
										"id": 330,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 329,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 331,
												"src": "11431:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 328,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "11431:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11430:6:0"
									},
									"scope": 364,
									"src": "11368:69:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 332,
										"nodeType": "StructuredDocumentation",
										"src": "11443:264:0",
										"text": " @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."
									},
									"functionSelector": "dd62ed3e",
									"id": 341,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "allowance",
									"nameLocation": "11721:9:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 337,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 334,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "11739:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "11731:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 333,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11731:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 336,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "11754:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "11746:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 335,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "11746:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11730:32:0"
									},
									"returnParameters": {
										"id": 340,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 339,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 341,
												"src": "11786:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 338,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "11786:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "11785:9:0"
									},
									"scope": 364,
									"src": "11712:83:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 342,
										"nodeType": "StructuredDocumentation",
										"src": "11801:667:0",
										"text": " @dev Sets a `value` amount of tokens as the allowance of `spender` over the\n caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."
									},
									"functionSelector": "095ea7b3",
									"id": 351,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "approve",
									"nameLocation": "12482:7:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 347,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 344,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "12498:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "12490:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 343,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12490:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 346,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12515:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "12507:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 345,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12507:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12489:32:0"
									},
									"returnParameters": {
										"id": 350,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 349,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 351,
												"src": "12540:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 348,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12540:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12539:6:0"
									},
									"scope": 364,
									"src": "12473:73:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "12552:297:0",
										"text": " @dev Moves a `value` amount of tokens from `from` to `to` using the\n allowance mechanism. `value` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."
									},
									"functionSelector": "23b872dd",
									"id": 363,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "transferFrom",
									"nameLocation": "12863:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 359,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 354,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "12884:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "12876:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 353,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12876:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 356,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "12898:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "12890:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 355,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "12890:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 358,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "12910:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "12902:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 357,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "12902:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12875:41:0"
									},
									"returnParameters": {
										"id": 362,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 361,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 363,
												"src": "12935:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 360,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "12935:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "12934:6:0"
									},
									"scope": 364,
									"src": "12854:87:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 709,
							"src": "10368:2575:0",
							"usedErrors": [],
							"usedEvents": [
								298,
								307
							]
						},
						{
							"id": 365,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "13078:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "SafeERC20",
							"contractDependencies": [],
							"contractKind": "library",
							"documentation": {
								"id": 366,
								"nodeType": "StructuredDocumentation",
								"src": "13106:458:0",
								"text": " @title SafeERC20\n @dev Wrappers around ERC-20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."
							},
							"fullyImplemented": true,
							"id": 647,
							"linearizedBaseContracts": [
								647
							],
							"name": "SafeERC20",
							"nameLocation": "13573:9:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"global": false,
									"id": 369,
									"libraryName": {
										"id": 367,
										"name": "Address",
										"nameLocations": [
											"13595:7:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 252,
										"src": "13595:7:0"
									},
									"nodeType": "UsingForDirective",
									"src": "13589:26:0",
									"typeName": {
										"id": 368,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "13607:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									}
								},
								{
									"documentation": {
										"id": 370,
										"nodeType": "StructuredDocumentation",
										"src": "13621:65:0",
										"text": " @dev An operation with an ERC-20 token failed."
									},
									"errorSelector": "5274afe7",
									"id": 374,
									"name": "SafeERC20FailedOperation",
									"nameLocation": "13697:24:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 373,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 372,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "13730:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 374,
												"src": "13722:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 371,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13722:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13721:15:0"
									},
									"src": "13691:46:0"
								},
								{
									"documentation": {
										"id": 375,
										"nodeType": "StructuredDocumentation",
										"src": "13743:71:0",
										"text": " @dev Indicates a failed `decreaseAllowance` request."
									},
									"errorSelector": "e570110f",
									"id": 383,
									"name": "SafeERC20FailedDecreaseAllowance",
									"nameLocation": "13825:32:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 382,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 377,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "13866:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "13858:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 376,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "13858:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 379,
												"mutability": "mutable",
												"name": "currentAllowance",
												"nameLocation": "13883:16:0",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "13875:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 378,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13875:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 381,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "13909:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 383,
												"src": "13901:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 380,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "13901:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "13857:70:0"
									},
									"src": "13819:109:0"
								},
								{
									"body": {
										"id": 406,
										"nodeType": "Block",
										"src": "14190:88:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 395,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 387,
															"src": "14220:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 398,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 387,
																		"src": "14242:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 399,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "14248:8:0",
																	"memberName": "transfer",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 331,
																	"src": "14242:14:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 400,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 389,
																			"src": "14259:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 401,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 391,
																			"src": "14263:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 402,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "14258:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,uint256)"
																	}
																],
																"expression": {
																	"id": 396,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "14227:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "14231:10:0",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "14227:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 403,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14227:43:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 394,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "14200:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 404,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14200:71:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 405,
												"nodeType": "ExpressionStatement",
												"src": "14200:71:0"
											}
										]
									},
									"documentation": {
										"id": 384,
										"nodeType": "StructuredDocumentation",
										"src": "13934:179:0",
										"text": " @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 407,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransfer",
									"nameLocation": "14127:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 392,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 387,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14147:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "14140:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 386,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 385,
														"name": "IERC20",
														"nameLocations": [
															"14140:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "14140:6:0"
													},
													"referencedDeclaration": 364,
													"src": "14140:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 389,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14162:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "14154:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 388,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14154:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 391,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14174:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 407,
												"src": "14166:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 390,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14166:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14139:41:0"
									},
									"returnParameters": {
										"id": 393,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14190:0:0"
									},
									"scope": 647,
									"src": "14118:160:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 433,
										"nodeType": "Block",
										"src": "14607:98:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 421,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 411,
															"src": "14637:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															}
														},
														{
															"arguments": [
																{
																	"expression": {
																		"id": 424,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 411,
																		"src": "14659:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		}
																	},
																	"id": 425,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"memberLocation": "14665:12:0",
																	"memberName": "transferFrom",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 363,
																	"src": "14659:18:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	}
																},
																{
																	"components": [
																		{
																			"id": 426,
																			"name": "from",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 413,
																			"src": "14680:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 427,
																			"name": "to",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 415,
																			"src": "14686:2:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_address",
																				"typeString": "address"
																			}
																		},
																		{
																			"id": 428,
																			"name": "value",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 417,
																			"src": "14690:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		}
																	],
																	"id": 429,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "14679:17:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
																		"typeString": "function (address,address,uint256) external returns (bool)"
																	},
																	{
																		"typeIdentifier": "t_tuple$_t_address_$_t_address_$_t_uint256_$",
																		"typeString": "tuple(address,address,uint256)"
																	}
																],
																"expression": {
																	"id": 422,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "14644:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 423,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "14648:10:0",
																"memberName": "encodeCall",
																"nodeType": "MemberAccess",
																"src": "14644:14:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																	"typeString": "function () pure returns (bytes memory)"
																}
															},
															"id": 430,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "14644:53:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"id": 420,
														"name": "_callOptionalReturn",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 597,
														"src": "14617:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_bytes_memory_ptr_$returns$__$",
															"typeString": "function (contract IERC20,bytes memory)"
														}
													},
													"id": 431,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "14617:81:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 432,
												"nodeType": "ExpressionStatement",
												"src": "14617:81:0"
											}
										]
									},
									"documentation": {
										"id": 408,
										"nodeType": "StructuredDocumentation",
										"src": "14284:228:0",
										"text": " @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."
									},
									"id": 434,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeTransferFrom",
									"nameLocation": "14526:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 418,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 411,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14550:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "14543:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 410,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 409,
														"name": "IERC20",
														"nameLocations": [
															"14543:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "14543:6:0"
													},
													"referencedDeclaration": 364,
													"src": "14543:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 413,
												"mutability": "mutable",
												"name": "from",
												"nameLocation": "14565:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "14557:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 412,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14557:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 415,
												"mutability": "mutable",
												"name": "to",
												"nameLocation": "14579:2:0",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "14571:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 414,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14571:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 417,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14591:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 434,
												"src": "14583:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 416,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14583:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14542:55:0"
									},
									"returnParameters": {
										"id": 419,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14607:0:0"
									},
									"scope": 647,
									"src": "14517:188:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 464,
										"nodeType": "Block",
										"src": "14982:139:0",
										"statements": [
											{
												"assignments": [
													446
												],
												"declarations": [
													{
														"constant": false,
														"id": 446,
														"mutability": "mutable",
														"name": "oldAllowance",
														"nameLocation": "15000:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 464,
														"src": "14992:20:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 445,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "14992:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 455,
												"initialValue": {
													"arguments": [
														{
															"arguments": [
																{
																	"id": 451,
																	"name": "this",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967268,
																	"src": "15039:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_SafeERC20_$647",
																		"typeString": "library SafeERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_SafeERC20_$647",
																		"typeString": "library SafeERC20"
																	}
																],
																"id": 450,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "15031:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 449,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "15031:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 452,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15031:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 453,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "15046:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"expression": {
															"id": 447,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "15015:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															}
														},
														"id": 448,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "15021:9:0",
														"memberName": "allowance",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 341,
														"src": "15015:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
															"typeString": "function (address,address) view external returns (uint256)"
														}
													},
													"id": 454,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15015:39:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "14992:62:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 457,
															"name": "token",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 438,
															"src": "15077:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															}
														},
														{
															"id": 458,
															"name": "spender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 440,
															"src": "15084:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 461,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 459,
																"name": "oldAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 446,
																"src": "15093:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "+",
															"rightExpression": {
																"id": 460,
																"name": "value",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 442,
																"src": "15108:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "15093:20:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 456,
														"name": "forceApprove",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 555,
														"src": "15064:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_address_$_t_uint256_$returns$__$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 462,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "15064:50:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 463,
												"nodeType": "ExpressionStatement",
												"src": "15064:50:0"
											}
										]
									},
									"documentation": {
										"id": 435,
										"nodeType": "StructuredDocumentation",
										"src": "14711:180:0",
										"text": " @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."
									},
									"id": 465,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeIncreaseAllowance",
									"nameLocation": "14905:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 443,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 438,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "14934:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "14927:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 437,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 436,
														"name": "IERC20",
														"nameLocations": [
															"14927:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "14927:6:0"
													},
													"referencedDeclaration": 364,
													"src": "14927:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 440,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "14949:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "14941:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 439,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "14941:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 442,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "14966:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 465,
												"src": "14958:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 441,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "14958:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "14926:46:0"
									},
									"returnParameters": {
										"id": 444,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "14982:0:0"
									},
									"scope": 647,
									"src": "14896:225:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 507,
										"nodeType": "Block",
										"src": "15422:370:0",
										"statements": [
											{
												"id": 506,
												"nodeType": "UncheckedBlock",
												"src": "15432:354:0",
												"statements": [
													{
														"assignments": [
															477
														],
														"declarations": [
															{
																"constant": false,
																"id": 477,
																"mutability": "mutable",
																"name": "currentAllowance",
																"nameLocation": "15464:16:0",
																"nodeType": "VariableDeclaration",
																"scope": 506,
																"src": "15456:24:0",
																"stateVariable": false,
																"storageLocation": "default",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"typeName": {
																	"id": 476,
																	"name": "uint256",
																	"nodeType": "ElementaryTypeName",
																	"src": "15456:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"visibility": "internal"
															}
														],
														"id": 486,
														"initialValue": {
															"arguments": [
																{
																	"arguments": [
																		{
																			"id": 482,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "15507:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_SafeERC20_$647",
																				"typeString": "library SafeERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_SafeERC20_$647",
																				"typeString": "library SafeERC20"
																			}
																		],
																		"id": 481,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "15499:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 480,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "15499:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 483,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "15499:13:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 484,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 471,
																	"src": "15514:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"expression": {
																	"id": 478,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "15483:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																},
																"id": 479,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "15489:9:0",
																"memberName": "allowance",
																"nodeType": "MemberAccess",
																"referencedDeclaration": 341,
																"src": "15483:15:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$",
																	"typeString": "function (address,address) view external returns (uint256)"
																}
															},
															"id": 485,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15483:39:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "VariableDeclarationStatement",
														"src": "15456:66:0"
													},
													{
														"condition": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 489,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 487,
																"name": "currentAllowance",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 477,
																"src": "15540:16:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"id": 488,
																"name": "requestedDecrease",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 473,
																"src": "15559:17:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"src": "15540:36:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"id": 497,
														"nodeType": "IfStatement",
														"src": "15536:160:0",
														"trueBody": {
															"id": 496,
															"nodeType": "Block",
															"src": "15578:118:0",
															"statements": [
																{
																	"errorCall": {
																		"arguments": [
																			{
																				"id": 491,
																				"name": "spender",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 471,
																				"src": "15636:7:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				}
																			},
																			{
																				"id": 492,
																				"name": "currentAllowance",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 477,
																				"src": "15645:16:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			{
																				"id": 493,
																				"name": "requestedDecrease",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 473,
																				"src": "15663:17:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_address",
																					"typeString": "address"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				},
																				{
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			],
																			"id": 490,
																			"name": "SafeERC20FailedDecreaseAllowance",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 383,
																			"src": "15603:32:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
																				"typeString": "function (address,uint256,uint256) pure"
																			}
																		},
																		"id": 494,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "15603:78:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_tuple$__$",
																			"typeString": "tuple()"
																		}
																	},
																	"id": 495,
																	"nodeType": "RevertStatement",
																	"src": "15596:85:0"
																}
															]
														}
													},
													{
														"expression": {
															"arguments": [
																{
																	"id": 499,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 469,
																	"src": "15722:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																},
																{
																	"id": 500,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 471,
																	"src": "15729:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"commonType": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	},
																	"id": 503,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"id": 501,
																		"name": "currentAllowance",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 477,
																		"src": "15738:16:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "-",
																	"rightExpression": {
																		"id": 502,
																		"name": "requestedDecrease",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 473,
																		"src": "15757:17:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"src": "15738:36:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	},
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	},
																	{
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																],
																"id": 498,
																"name": "forceApprove",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 555,
																"src": "15709:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_address_$_t_uint256_$returns$__$",
																	"typeString": "function (contract IERC20,address,uint256)"
																}
															},
															"id": 504,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "15709:66:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$__$",
																"typeString": "tuple()"
															}
														},
														"id": 505,
														"nodeType": "ExpressionStatement",
														"src": "15709:66:0"
													}
												]
											}
										]
									},
									"documentation": {
										"id": 466,
										"nodeType": "StructuredDocumentation",
										"src": "15127:192:0",
										"text": " @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\n value, non-reverting calls are assumed to be successful."
									},
									"id": 508,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "safeDecreaseAllowance",
									"nameLocation": "15333:21:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 469,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "15362:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "15355:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 468,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 467,
														"name": "IERC20",
														"nameLocations": [
															"15355:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "15355:6:0"
													},
													"referencedDeclaration": 364,
													"src": "15355:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 471,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "15377:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "15369:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 470,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "15369:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "requestedDecrease",
												"nameLocation": "15394:17:0",
												"nodeType": "VariableDeclaration",
												"scope": 508,
												"src": "15386:25:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 472,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "15386:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "15354:58:0"
									},
									"returnParameters": {
										"id": 475,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "15422:0:0"
									},
									"scope": 647,
									"src": "15324:468:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 554,
										"nodeType": "Block",
										"src": "16188:303:0",
										"statements": [
											{
												"assignments": [
													520
												],
												"declarations": [
													{
														"constant": false,
														"id": 520,
														"mutability": "mutable",
														"name": "approvalCall",
														"nameLocation": "16211:12:0",
														"nodeType": "VariableDeclaration",
														"scope": 554,
														"src": "16198:25:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 519,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "16198:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 529,
												"initialValue": {
													"arguments": [
														{
															"expression": {
																"id": 523,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "16241:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$364",
																	"typeString": "contract IERC20"
																}
															},
															"id": 524,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "16247:7:0",
															"memberName": "approve",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 351,
															"src": "16241:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															}
														},
														{
															"components": [
																{
																	"id": 525,
																	"name": "spender",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 514,
																	"src": "16257:7:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																{
																	"id": 526,
																	"name": "value",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 516,
																	"src": "16266:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																}
															],
															"id": 527,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "16256:16:0",
															"typeDescriptions": {
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																"typeString": "function (address,uint256) external returns (bool)"
															},
															{
																"typeIdentifier": "t_tuple$_t_address_$_t_uint256_$",
																"typeString": "tuple(address,uint256)"
															}
														],
														"expression": {
															"id": 521,
															"name": "abi",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967295,
															"src": "16226:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_abi",
																"typeString": "abi"
															}
														},
														"id": 522,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "16230:10:0",
														"memberName": "encodeCall",
														"nodeType": "MemberAccess",
														"src": "16226:14:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
															"typeString": "function () pure returns (bytes memory)"
														}
													},
													"id": 528,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "16226:47:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "16198:75:0"
											},
											{
												"condition": {
													"id": 534,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "16288:45:0",
													"subExpression": {
														"arguments": [
															{
																"id": 531,
																"name": "token",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 512,
																"src": "16313:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_contract$_IERC20_$364",
																	"typeString": "contract IERC20"
																}
															},
															{
																"id": 532,
																"name": "approvalCall",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "16320:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_contract$_IERC20_$364",
																	"typeString": "contract IERC20"
																},
																{
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															],
															"id": 530,
															"name": "_callOptionalReturnBool",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 646,
															"src": "16289:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_bytes_memory_ptr_$returns$_t_bool_$",
																"typeString": "function (contract IERC20,bytes memory) returns (bool)"
															}
														},
														"id": 533,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "16289:44:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 553,
												"nodeType": "IfStatement",
												"src": "16284:201:0",
												"trueBody": {
													"id": 552,
													"nodeType": "Block",
													"src": "16335:150:0",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"id": 536,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 512,
																		"src": "16369:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"arguments": [
																			{
																				"expression": {
																					"id": 539,
																					"name": "token",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 512,
																					"src": "16391:5:0",
																					"typeDescriptions": {
																						"typeIdentifier": "t_contract$_IERC20_$364",
																						"typeString": "contract IERC20"
																					}
																				},
																				"id": 540,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "16397:7:0",
																				"memberName": "approve",
																				"nodeType": "MemberAccess",
																				"referencedDeclaration": 351,
																				"src": "16391:13:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 541,
																						"name": "spender",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 514,
																						"src": "16407:7:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_address",
																							"typeString": "address"
																						}
																					},
																					{
																						"hexValue": "30",
																						"id": 542,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "16416:1:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_0_by_1",
																							"typeString": "int_const 0"
																						},
																						"value": "0"
																					}
																				],
																				"id": 543,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "16406:12:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
																					"typeString": "function (address,uint256) external returns (bool)"
																				},
																				{
																					"typeIdentifier": "t_tuple$_t_address_$_t_rational_0_by_1_$",
																					"typeString": "tuple(address,int_const 0)"
																				}
																			],
																			"expression": {
																				"id": 537,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "16376:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 538,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "16380:10:0",
																			"memberName": "encodeCall",
																			"nodeType": "MemberAccess",
																			"src": "16376:14:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abiencodecall_pure$__$returns$_t_bytes_memory_ptr_$",
																				"typeString": "function () pure returns (bytes memory)"
																			}
																		},
																		"id": 544,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "16376:43:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 535,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 597,
																	"src": "16349:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 545,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16349:71:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 546,
															"nodeType": "ExpressionStatement",
															"src": "16349:71:0"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"id": 548,
																		"name": "token",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 512,
																		"src": "16454:5:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		}
																	},
																	{
																		"id": 549,
																		"name": "approvalCall",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 520,
																		"src": "16461:12:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_contract$_IERC20_$364",
																			"typeString": "contract IERC20"
																		},
																		{
																			"typeIdentifier": "t_bytes_memory_ptr",
																			"typeString": "bytes memory"
																		}
																	],
																	"id": 547,
																	"name": "_callOptionalReturn",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 597,
																	"src": "16434:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_bytes_memory_ptr_$returns$__$",
																		"typeString": "function (contract IERC20,bytes memory)"
																	}
																},
																"id": 550,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "16434:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 551,
															"nodeType": "ExpressionStatement",
															"src": "16434:40:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 509,
										"nodeType": "StructuredDocumentation",
										"src": "15798:308:0",
										"text": " @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."
									},
									"id": 555,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "forceApprove",
									"nameLocation": "16120:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 517,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 512,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16140:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "16133:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 511,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 510,
														"name": "IERC20",
														"nameLocations": [
															"16133:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "16133:6:0"
													},
													"referencedDeclaration": 364,
													"src": "16133:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 514,
												"mutability": "mutable",
												"name": "spender",
												"nameLocation": "16155:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "16147:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 513,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "16147:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 516,
												"mutability": "mutable",
												"name": "value",
												"nameLocation": "16172:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 555,
												"src": "16164:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 515,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "16164:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16132:46:0"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16188:0:0"
									},
									"scope": 647,
									"src": "16111:380:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 596,
										"nodeType": "Block",
										"src": "16944:559:0",
										"statements": [
											{
												"assignments": [
													565
												],
												"declarations": [
													{
														"constant": false,
														"id": 565,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "17306:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 596,
														"src": "17293:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 564,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "17293:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 573,
												"initialValue": {
													"arguments": [
														{
															"id": 571,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 561,
															"src": "17347:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 568,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 559,
																	"src": "17327:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 567,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "17319:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 566,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "17319:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 569,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17319:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 570,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "17334:12:0",
														"memberName": "functionCall",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 73,
														"src": "17319:27:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$",
															"typeString": "function (address,bytes memory) returns (bytes memory)"
														}
													},
													"id": 572,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "17319:33:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_memory_ptr",
														"typeString": "bytes memory"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "17293:59:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 586,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 577,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 574,
																"name": "returndata",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 565,
																"src": "17366:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 575,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "17377:6:0",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "17366:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "!=",
														"rightExpression": {
															"hexValue": "30",
															"id": 576,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "17387:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "17366:22:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "17392:31:0",
														"subExpression": {
															"arguments": [
																{
																	"id": 580,
																	"name": "returndata",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 565,
																	"src": "17404:10:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	}
																},
																{
																	"components": [
																		{
																			"id": 582,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "17417:4:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_bool_$",
																				"typeString": "type(bool)"
																			},
																			"typeName": {
																				"id": 581,
																				"name": "bool",
																				"nodeType": "ElementaryTypeName",
																				"src": "17417:4:0",
																				"typeDescriptions": {}
																			}
																		}
																	],
																	"id": 583,
																	"isConstant": false,
																	"isInlineArray": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "TupleExpression",
																	"src": "17416:6:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_bytes_memory_ptr",
																		"typeString": "bytes memory"
																	},
																	{
																		"typeIdentifier": "t_type$_t_bool_$",
																		"typeString": "type(bool)"
																	}
																],
																"expression": {
																	"id": 578,
																	"name": "abi",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967295,
																	"src": "17393:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_abi",
																		"typeString": "abi"
																	}
																},
																"id": 579,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"memberLocation": "17397:6:0",
																"memberName": "decode",
																"nodeType": "MemberAccess",
																"src": "17393:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 584,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "17393:30:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "17366:57:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 595,
												"nodeType": "IfStatement",
												"src": "17362:135:0",
												"trueBody": {
													"id": 594,
													"nodeType": "Block",
													"src": "17425:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"id": 590,
																				"name": "token",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 559,
																				"src": "17479:5:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_contract$_IERC20_$364",
																					"typeString": "contract IERC20"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_contract$_IERC20_$364",
																					"typeString": "contract IERC20"
																				}
																			],
																			"id": 589,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "17471:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 588,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "17471:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 591,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "17471:14:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 587,
																	"name": "SafeERC20FailedOperation",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 374,
																	"src": "17446:24:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 592,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "17446:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 593,
															"nodeType": "RevertStatement",
															"src": "17439:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 556,
										"nodeType": "StructuredDocumentation",
										"src": "16497:372:0",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."
									},
									"id": 597,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturn",
									"nameLocation": "16883:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 562,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 559,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "16910:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "16903:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 558,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 557,
														"name": "IERC20",
														"nameLocations": [
															"16903:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "16903:6:0"
													},
													"referencedDeclaration": 364,
													"src": "16903:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 561,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "16930:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 597,
												"src": "16917:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 560,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "16917:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "16902:33:0"
									},
									"returnParameters": {
										"id": 563,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "16944:0:0"
									},
									"scope": 647,
									"src": "16874:629:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								},
								{
									"body": {
										"id": 645,
										"nodeType": "Block",
										"src": "18093:489:0",
										"statements": [
											{
												"assignments": [
													609,
													611
												],
												"declarations": [
													{
														"constant": false,
														"id": 609,
														"mutability": "mutable",
														"name": "success",
														"nameLocation": "18394:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 645,
														"src": "18389:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 608,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "18389:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													},
													{
														"constant": false,
														"id": 611,
														"mutability": "mutable",
														"name": "returndata",
														"nameLocation": "18416:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 645,
														"src": "18403:23:0",
														"stateVariable": false,
														"storageLocation": "memory",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes_memory_ptr",
															"typeString": "bytes"
														},
														"typeName": {
															"id": 610,
															"name": "bytes",
															"nodeType": "ElementaryTypeName",
															"src": "18403:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_storage_ptr",
																"typeString": "bytes"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 619,
												"initialValue": {
													"arguments": [
														{
															"id": 617,
															"name": "data",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 603,
															"src": "18450:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bytes_memory_ptr",
																"typeString": "bytes memory"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 614,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 601,
																	"src": "18438:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_contract$_IERC20_$364",
																		"typeString": "contract IERC20"
																	}
																],
																"id": 613,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "18430:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 612,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "18430:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 615,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "18430:14:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"id": 616,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "18445:4:0",
														"memberName": "call",
														"nodeType": "MemberAccess",
														"src": "18430:19:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$",
															"typeString": "function (bytes memory) payable returns (bool,bytes memory)"
														}
													},
													"id": 618,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18430:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$_t_bool_$_t_bytes_memory_ptr_$",
														"typeString": "tuple(bool,bytes memory)"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "18388:67:0"
											},
											{
												"expression": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 643,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"id": 634,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 620,
															"name": "success",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 609,
															"src": "18472:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "&&",
														"rightExpression": {
															"components": [
																{
																	"commonType": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"id": 632,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"lValueRequested": false,
																	"leftExpression": {
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 624,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"expression": {
																				"id": 621,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 611,
																				"src": "18484:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			"id": 622,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"memberLocation": "18495:6:0",
																			"memberName": "length",
																			"nodeType": "MemberAccess",
																			"src": "18484:17:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "==",
																		"rightExpression": {
																			"hexValue": "30",
																			"id": 623,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "number",
																			"lValueRequested": false,
																			"nodeType": "Literal",
																			"src": "18505:1:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_rational_0_by_1",
																				"typeString": "int_const 0"
																			},
																			"value": "0"
																		},
																		"src": "18484:22:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"nodeType": "BinaryOperation",
																	"operator": "||",
																	"rightExpression": {
																		"arguments": [
																			{
																				"id": 627,
																				"name": "returndata",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 611,
																				"src": "18521:10:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				}
																			},
																			{
																				"components": [
																					{
																						"id": 629,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"lValueRequested": false,
																						"nodeType": "ElementaryTypeNameExpression",
																						"src": "18534:4:0",
																						"typeDescriptions": {
																							"typeIdentifier": "t_type$_t_bool_$",
																							"typeString": "type(bool)"
																						},
																						"typeName": {
																							"id": 628,
																							"name": "bool",
																							"nodeType": "ElementaryTypeName",
																							"src": "18534:4:0",
																							"typeDescriptions": {}
																						}
																					}
																				],
																				"id": 630,
																				"isConstant": false,
																				"isInlineArray": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "TupleExpression",
																				"src": "18533:6:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_bytes_memory_ptr",
																					"typeString": "bytes memory"
																				},
																				{
																					"typeIdentifier": "t_type$_t_bool_$",
																					"typeString": "type(bool)"
																				}
																			],
																			"expression": {
																				"id": 625,
																				"name": "abi",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967295,
																				"src": "18510:3:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_magic_abi",
																					"typeString": "abi"
																				}
																			},
																			"id": 626,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"memberLocation": "18514:6:0",
																			"memberName": "decode",
																			"nodeType": "MemberAccess",
																			"src": "18510:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_abidecode_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 631,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "18510:30:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	"src": "18484:56:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																}
															],
															"id": 633,
															"isConstant": false,
															"isInlineArray": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"nodeType": "TupleExpression",
															"src": "18483:58:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"src": "18472:69:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 642,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 637,
																			"name": "token",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 601,
																			"src": "18553:5:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_IERC20_$364",
																				"typeString": "contract IERC20"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_IERC20_$364",
																				"typeString": "contract IERC20"
																			}
																		],
																		"id": 636,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "18545:7:0",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 635,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "18545:7:0",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 638,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "18545:14:0",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 639,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "18560:4:0",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "18545:19:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 640,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "18565:6:0",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "18545:26:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">",
														"rightExpression": {
															"hexValue": "30",
															"id": 641,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18574:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "18545:30:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "18472:103:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 607,
												"id": 644,
												"nodeType": "Return",
												"src": "18465:110:0"
											}
										]
									},
									"documentation": {
										"id": 598,
										"nodeType": "StructuredDocumentation",
										"src": "17509:490:0",
										"text": " @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."
									},
									"id": 646,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_callOptionalReturnBool",
									"nameLocation": "18013:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 604,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 601,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "18044:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "18037:12:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_contract$_IERC20_$364",
													"typeString": "contract IERC20"
												},
												"typeName": {
													"id": 600,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 599,
														"name": "IERC20",
														"nameLocations": [
															"18037:6:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 364,
														"src": "18037:6:0"
													},
													"referencedDeclaration": 364,
													"src": "18037:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_contract$_IERC20_$364",
														"typeString": "contract IERC20"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 603,
												"mutability": "mutable",
												"name": "data",
												"nameLocation": "18064:4:0",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "18051:17:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_memory_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 602,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "18051:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18036:33:0"
									},
									"returnParameters": {
										"id": 607,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 606,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 646,
												"src": "18087:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 605,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "18087:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18086:6:0"
									},
									"scope": 647,
									"src": "18004:578:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 709,
							"src": "13565:5019:0",
							"usedErrors": [
								374,
								383
							],
							"usedEvents": []
						},
						{
							"id": 648,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "18611:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "Bank",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 708,
							"linearizedBaseContracts": [
								708
							],
							"name": "Bank",
							"nameLocation": "18646:4:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"functionSelector": "8da5cb5b",
									"id": 650,
									"mutability": "mutable",
									"name": "owner",
									"nameLocation": "18672:5:0",
									"nodeType": "VariableDeclaration",
									"scope": 708,
									"src": "18657:20:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_address",
										"typeString": "address"
									},
									"typeName": {
										"id": 649,
										"name": "address",
										"nodeType": "ElementaryTypeName",
										"src": "18657:7:0",
										"stateMutability": "nonpayable",
										"typeDescriptions": {
											"typeIdentifier": "t_address",
											"typeString": "address"
										}
									},
									"visibility": "public"
								},
								{
									"global": false,
									"id": 654,
									"libraryName": {
										"id": 651,
										"name": "SafeERC20",
										"nameLocations": [
											"18689:9:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 647,
										"src": "18689:9:0"
									},
									"nodeType": "UsingForDirective",
									"src": "18683:27:0",
									"typeName": {
										"id": 653,
										"nodeType": "UserDefinedTypeName",
										"pathNode": {
											"id": 652,
											"name": "IERC20",
											"nameLocations": [
												"18703:6:0"
											],
											"nodeType": "IdentifierPath",
											"referencedDeclaration": 364,
											"src": "18703:6:0"
										},
										"referencedDeclaration": 364,
										"src": "18703:6:0",
										"typeDescriptions": {
											"typeIdentifier": "t_contract$_IERC20_$364",
											"typeString": "contract IERC20"
										}
									}
								},
								{
									"body": {
										"id": 662,
										"nodeType": "Block",
										"src": "18733:35:0",
										"statements": [
											{
												"expression": {
													"id": 660,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 657,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "18743:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"expression": {
															"id": 658,
															"name": "msg",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967281,
															"src": "18751:3:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_message",
																"typeString": "msg"
															}
														},
														"id": 659,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "18755:6:0",
														"memberName": "sender",
														"nodeType": "MemberAccess",
														"src": "18751:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "18743:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 661,
												"nodeType": "ExpressionStatement",
												"src": "18743:18:0"
											}
										]
									},
									"id": 663,
									"implemented": true,
									"kind": "constructor",
									"modifiers": [],
									"name": "",
									"nameLocation": "-1:-1:-1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18731:2:0"
									},
									"returnParameters": {
										"id": 656,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18733:0:0"
									},
									"scope": 708,
									"src": "18720:48:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 674,
										"nodeType": "Block",
										"src": "18795:76:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															"id": 669,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"expression": {
																	"id": 666,
																	"name": "msg",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 4294967281,
																	"src": "18813:3:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_magic_message",
																		"typeString": "msg"
																	}
																},
																"id": 667,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "18817:6:0",
																"memberName": "sender",
																"nodeType": "MemberAccess",
																"src": "18813:10:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"id": 668,
																"name": "owner",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 650,
																"src": "18827:5:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_address",
																	"typeString": "address"
																}
															},
															"src": "18813:19:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "4552524f525f5045524d495353494f4e",
															"id": 670,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "18834:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_bcdf352dc508bc3efcba9254ed58add8548a43d4a14ee81a7e3061cf76bb2b42",
																"typeString": "literal_string \"ERROR_PERMISSION\""
															},
															"value": "ERROR_PERMISSION"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_bcdf352dc508bc3efcba9254ed58add8548a43d4a14ee81a7e3061cf76bb2b42",
																"typeString": "literal_string \"ERROR_PERMISSION\""
															}
														],
														"id": 665,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "18805:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 671,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "18805:48:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 672,
												"nodeType": "ExpressionStatement",
												"src": "18805:48:0"
											},
											{
												"id": 673,
												"nodeType": "PlaceholderStatement",
												"src": "18863:1:0"
											}
										]
									},
									"id": 675,
									"name": "onlyOwner",
									"nameLocation": "18783:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 664,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18792:2:0"
									},
									"src": "18774:97:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 686,
										"nodeType": "Block",
										"src": "18927:31:0",
										"statements": [
											{
												"expression": {
													"id": 684,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"id": 682,
														"name": "owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 650,
														"src": "18937:5:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 683,
														"name": "_owner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 677,
														"src": "18945:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "18937:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 685,
												"nodeType": "ExpressionStatement",
												"src": "18937:14:0"
											}
										]
									},
									"functionSelector": "13af4035",
									"id": 687,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 680,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 679,
												"name": "onlyOwner",
												"nameLocations": [
													"18918:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 675,
												"src": "18918:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "18918:9:0"
										}
									],
									"name": "setOwner",
									"nameLocation": "18886:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 678,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 677,
												"mutability": "mutable",
												"name": "_owner",
												"nameLocation": "18903:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 687,
												"src": "18895:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 676,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18895:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18894:16:0"
									},
									"returnParameters": {
										"id": 681,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "18927:0:0"
									},
									"scope": 708,
									"src": "18877:81:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 706,
										"nodeType": "Block",
										"src": "19051:124:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 702,
															"name": "receiver",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 691,
															"src": "19151:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 703,
															"name": "amount",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 693,
															"src": "19161:6:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"arguments": [
																{
																	"id": 699,
																	"name": "token",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 689,
																	"src": "19131:5:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																],
																"id": 698,
																"name": "IERC20",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 364,
																"src": "19124:6:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_contract$_IERC20_$364_$",
																	"typeString": "type(contract IERC20)"
																}
															},
															"id": 700,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "19124:13:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_contract$_IERC20_$364",
																"typeString": "contract IERC20"
															}
														},
														"id": 701,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "19138:12:0",
														"memberName": "safeTransfer",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 407,
														"src": "19124:26:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_contract$_IERC20_$364_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$364_$",
															"typeString": "function (contract IERC20,address,uint256)"
														}
													},
													"id": 704,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "19124:44:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 705,
												"nodeType": "ExpressionStatement",
												"src": "19124:44:0"
											}
										]
									},
									"functionSelector": "d1660f99",
									"id": 707,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 696,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 695,
												"name": "onlyOwner",
												"nameLocations": [
													"19042:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 675,
												"src": "19042:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "19042:9:0"
										}
									],
									"name": "safeTransfer",
									"nameLocation": "18973:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 694,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 689,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "18994:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "18986:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 688,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "18986:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 691,
												"mutability": "mutable",
												"name": "receiver",
												"nameLocation": "19009:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "19001:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 690,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "19001:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 693,
												"mutability": "mutable",
												"name": "amount",
												"nameLocation": "19027:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 707,
												"src": "19019:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 692,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "19019:7:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "18985:49:0"
									},
									"returnParameters": {
										"id": 697,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "19051:0:0"
									},
									"scope": 708,
									"src": "18964:211:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 709,
							"src": "18637:540:0",
							"usedErrors": [
								7,
								12,
								15,
								374
							],
							"usedEvents": []
						}
					],
					"src": "164:19014:0"
				},
				"id": 0
			}
		}
	}
}